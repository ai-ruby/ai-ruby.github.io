<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ai-ruby.github.io/"/>
  <updated>2018-07-27T03:32:51.443Z</updated>
  <id>https://ai-ruby.github.io/</id>
  
  <author>
    <name>ai-ruby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learning Typescript</title>
    <link href="https://ai-ruby.github.io/2018/07/27/Typescript/"/>
    <id>https://ai-ruby.github.io/2018/07/27/Typescript/</id>
    <published>2018-07-27T03:31:04.000Z</published>
    <updated>2018-07-27T03:32:51.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>node 环境<ul><li>去官网下载个新版本 <code>https://nodejs.org/zh-cn/</code> 安装<code>node</code>的同时 <code>npm</code>也会安装起来的</li><li>输入node -v , npm-v后可看到版本号即安装成功</li></ul></li></ul><ul><li>全局安装Typescript, -g是全局<ul><li>npm install typescript -g</li><li>tsc -v</li></ul></li></ul><p><em>注意</em>如果是mac系统,则需要<code>sudo</code> </p><h3 id="简单编写hello-world"><a href="#简单编写hello-world" class="headerlink" title="简单编写hello world"></a>简单编写<code>hello world</code></h3><ul><li><p>1.初始化项目:进入你的编程文件夹后使用<code>npm init -y</code>初始化,生成 package.json 文件配置</p></li><li><p>2.typescript项目配置文件: 创建 <code>tsconfig.json</code>文件,输入 <code>tsc --init</code>,可以通过读取他来设置Typescript 编译器参数</p></li><li><p>3.安装@types/node: 使用 <code>npm install @type/node --dev-save</code>进行安装.主要是解决模块的声明文件问题</p></li><li><p>4.新建<code>HelloWorld.ts</code>文件,然后保存,代码如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:string = &quot;HelloWorld&quot;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure></li><li><p>5自动编译:</p><ul><li><p>若是在vscode编程的,在其任务菜单下,运行<code>生成任务</code>, 然后选择<code>tsc: 构建-tsconfig.json</code>,这时候会生成一个 <code>HelloWorld.js</code></p></li><li><p>若是HBuilder: </p><ul><li>最上方菜单栏点击<code>工具-插件</code>安装</li><li>点击下方<code>浏览Eclipse插件市场</code></li><li>搜索 <code>typescript插件</code>进行安装后<code>重启编辑器</code></li><li>点击菜单栏<code>工具-选项</code>,选择编译ts文件<code>Typescript-Compiler - 勾选 Compiler all Typescript files on build</code></li><li>在<code>项目上右键</code>点击-<code>配置 Enalbe typescript builder</code>,之后再保存.ts文件时会自动在当前目录编译对应的目录</li></ul></li><li><p>不是自动编译的则在命令行输入 <code>tsc 文件名</code>,即可</p></li></ul></li></ul><h3 id="typescript中的数据类型"><a href="#typescript中的数据类型" class="headerlink" title="typescript中的数据类型"></a>typescript中的数据类型</h3><ul><li>typescript为了是编写代码更规范,更有利维护,增加类型的验证,提供以下的数据类型<ul><li>boolean 布尔类型</li><li>number  数字类型</li><li>string  字符串类型</li><li>array   数字类型</li><li>tuple   元组类型</li><li>enum    枚举类型</li><li>any     任意类型</li><li>null和undefined</li><li>voild 类型</li><li>never 其他类型</li></ul></li></ul><p><em>注意: ts代码必须指定类型</em></p><h4 id="boolean-布尔类型"><a href="#boolean-布尔类型" class="headerlink" title="boolean 布尔类型"></a>boolean 布尔类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// es5: 正确写法,但是在ts是错误写法</span><br><span class="line">var flag = false;</span><br><span class="line">flag = 456</span><br><span class="line"></span><br><span class="line">// ts写法:</span><br><span class="line">var flag:boolean = false</span><br><span class="line">flag = true // 正确</span><br><span class="line">// flag = 123 // 错误</span><br><span class="line">console.log(flag)</span><br></pre></td></tr></table></figure><h4 id="number和string类型和boolean类型定义一样"><a href="#number和string类型和boolean类型定义一样" class="headerlink" title="number和string类型和boolean类型定义一样"></a>number和string类型和boolean类型定义一样</h4><h4 id="array数组类型-ts有三种方式"><a href="#array数组类型-ts有三种方式" class="headerlink" title="array数组类型, ts有三种方式"></a>array数组类型, ts有三种方式</h4><ul><li><p>1.<code>arr:number[] = []</code></p><ul><li>指定arr数组里都是数字,如果有字符串或者其他类型会报错,即使运行成功,但是ts规则也会报错的 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1:number[]=[11, 22, 33] </span><br><span class="line"></span><br><span class="line">var arr2:number[]=[11, 22, &apos;33&apos;] // ts规则报错</span><br><span class="line"></span><br><span class="line">console.log(arr1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.<code>arr:Array&lt;number&gt;= []</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr3:Array&lt;number&gt;= [11, 22, 33]</span><br><span class="line"></span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li><code>arr:any[] = []</code></li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr4:any[] = [&apos;12&apos;, 23, true]</span><br><span class="line">console.log(arr4)</span><br></pre></td></tr></table></figure><h4 id="tuple-元组类型"><a href="#tuple-元组类型" class="headerlink" title="tuple 元组类型"></a>tuple 元组类型</h4><ul><li>属于数组一种, 可以数组或者是字符串,指定数组每一个位置中指定特定类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr:[number, string] = [123, &apos;this is ts&apos;] // 正确</span><br><span class="line"></span><br><span class="line">// let arr:[number, string] = [&apos;123&apos;, &apos;this is ts&apos;] // 错误</span><br></pre></td></tr></table></figure><h4 id="enum-枚举类型"><a href="#enum-枚举类型" class="headerlink" title="enum 枚举类型"></a>enum 枚举类型</h4><ul><li>事先考虑到某一个变量可能取到的值,尽量用自然语言中含义清楚的单词来表示它的每一个值 –就叫枚举方法,用这个方法定义的类型称枚举类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Flag &#123;success=1, error=2&#125;</span><br><span class="line">let s:Flag = Flag.success</span><br><span class="line"></span><br><span class="line">console.log(s) // 1</span><br></pre></td></tr></table></figure><ul><li>如果标识符没有赋值,则它的值就是下标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;blue, red, &apos;orange&apos;&#125;</span><br><span class="line"></span><br><span class="line">var c:Color = Color.red</span><br><span class="line"></span><br><span class="line">console.log(c) // 1</span><br><span class="line"></span><br><span class="line">// 若red = 3</span><br><span class="line">enum Color &#123;blue, red = 3, &apos;orange&apos;&#125;</span><br><span class="line"></span><br><span class="line">var o:Color = Color.orange</span><br><span class="line"></span><br><span class="line">console.log(o) // 4</span><br></pre></td></tr></table></figure><h4 id="any-任意类型"><a href="#any-任意类型" class="headerlink" title="any 任意类型"></a>any 任意类型</h4><ul><li>可以定义任意类型,number,string,boolean都行</li><li>任意类型的用处</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const oBox:any = document.getElementById(&apos;box&apos;)</span><br><span class="line"></span><br><span class="line">oBox.style.color = &apos;red&apos;</span><br></pre></td></tr></table></figure><h4 id="null和undefined-其他-never-类型的子类型"><a href="#null和undefined-其他-never-类型的子类型" class="headerlink" title="null和undefined 其他(never))类型的子类型"></a>null和undefined 其他(never))类型的子类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// var num:number // 输出会报错</span><br><span class="line"></span><br><span class="line">var num:undefined // 输出undefined 不会报错</span><br><span class="line"></span><br><span class="line">console.log(num) // undefined</span><br><span class="line"></span><br><span class="line">// 定义未赋值</span><br><span class="line">var num: number | undefined</span><br><span class="line"></span><br><span class="line">// 一个元素可能是number类型,可能是 null, undefined类型</span><br><span class="line">var num:number | null | undefined</span><br></pre></td></tr></table></figure><h4 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h4><ul><li>没有任何类型,一般用于定义方法的时候没有返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 正确写法</span><br><span class="line">// 没有返回值</span><br><span class="line">function run1():void &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run1()</span><br><span class="line"></span><br><span class="line">// 有返回值,返回值是什么类型的则定义什么类型</span><br><span class="line">function run2():number &#123;</span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 错误写法</span><br><span class="line">function run3():undefined &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line">run3()</span><br></pre></td></tr></table></figure><h4 id="never类型-其他类型"><a href="#never类型-其他类型" class="headerlink" title="never类型: 其他类型"></a>never类型: 其他类型</h4><ul><li>包括(null 和 undefined)的子类型,代表从不会出现的值</li><li>这意味着声明 <code>never的变量</code>只能被<code>never类型</code>赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a:never</span><br><span class="line"></span><br><span class="line">// a = 123 // 报错</span><br><span class="line"></span><br><span class="line">a(() =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;error&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="typescript-函数"><a href="#typescript-函数" class="headerlink" title="typescript 函数"></a>typescript 函数</h3><ul><li>函数的定义</li><li>可选参数</li><li>默认参数</li><li>剩余参数</li><li>函数重载</li><li>箭头函数 es6</li></ul><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>es5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function run() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var run2 = function() &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function run:string &#123;</span><br><span class="line">    </span><br><span class="line">    return &apos;run&apos;</span><br><span class="line">    // return 123 // 错误,定义未string类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var run = function():number &#123;</span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure></p><p>ts中定义方法传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function getInfo(name:string, age:number):string &#123;</span><br><span class="line">    return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;, 20))</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var getInfo2 = function(name:string, age:number):string &#123;</span><br><span class="line">    return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo2(&apos;xiao2&apos;, 22))</span><br></pre></td></tr></table></figure><h4 id="方法可选参数"><a href="#方法可选参数" class="headerlink" title="方法可选参数"></a>方法可选参数</h4><ul><li>es5里面的方法的实参和形参可以不一样,但ts中必须一样,如果不一样就需要配置可选参数</li><li><code>?</code> 配置参数,<em>注意</em>可选参数必须配置到参数后面</li></ul><p>形参中有个<code>?</code>则是可传可不传,没有的,则一定传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getInfo(name:string, age?:number):string &#123;</span><br><span class="line">    if(age) &#123;</span><br><span class="line">        return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return `$&#123;name&#125; -- 年龄保密`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;)) // xiao -- 年龄保密</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;, 12)) // xiao -- 12</span><br><span class="line"></span><br><span class="line">// 错误写法 可选参数必须配置到参数后面</span><br><span class="line">// function getInfo(name?:string, age:number):string &#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul><li>es5 没法设置默认参数,但是es6和ts可以设置默认参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getInfo(name:string, age:number=20):string &#123;</span><br><span class="line">    if(age) &#123;</span><br><span class="line">        return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return `$&#123;name&#125; -- 年龄保密`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;))</span><br></pre></td></tr></table></figure><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function sum(a:number, b:number, c:number):number &#123;</span><br><span class="line">    return a+b+c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3))</span><br><span class="line"></span><br><span class="line">// 三点运算符</span><br><span class="line"></span><br><span class="line">function sum(...result:number[]):number &#123;</span><br><span class="line">    var sum = 0</span><br><span class="line">    </span><br><span class="line">    for(var i =0; i &lt; result.length; i++) &#123;</span><br><span class="line">        sum += result[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3))</span><br></pre></td></tr></table></figure><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><ul><li>java中方法的重载,重载是指两个或者两个以上同名函数,但它们的参数不一样,这时会出现函数重载情况</li><li>typescript中的重载,通过为同一个函数提供多个函数类型定义来试下多种功能的目的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// es5中出现同名方法会替换上面的方法</span><br><span class="line">function css(config) &#123;&#125;</span><br><span class="line">function css(config, value) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ts中的重载</span><br><span class="line">function getInfo(name:string):string;</span><br><span class="line">function getInfo(age:number):number;</span><br><span class="line"></span><br><span class="line">function getInfo(str:any):any &#123;</span><br><span class="line">    if(str === &apos;string&apos;) &#123;</span><br><span class="line">        return &apos;我的名字叫&apos; + str</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &apos;我的年龄是&apos; + str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;)) // 正确</span><br><span class="line">console.log(getInfo(20)) // 正确</span><br><span class="line">// console.log(getInfo(true)) // 错误,因为上面并没有找到参数和boolean类型匹配的</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><h3 id="typescript-类"><a href="#typescript-类" class="headerlink" title="typescript 类"></a>typescript 类</h3><ul><li>类的定义</li><li>继承</li><li>类的修饰符</li><li>静态属性 静态方法</li><li>抽象类 继承 多态</li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">function Person(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.run = function() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p  = new Person(&apos;xiao&apos;)</span><br><span class="line">p.run()</span><br><span class="line"></span><br><span class="line">// ts</span><br><span class="line">class Person &#123;</span><br><span class="line">    name: string // 属性 前面忽略public关键词</span><br><span class="line">    </span><br><span class="line">    constructor(n:string) &#123; // 构造函数 实例化类的时候触发方法</span><br><span class="line">        this.name = n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():void &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line"></span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><ul><li>get和set</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    name: string // 属性 前面忽略public关键词</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123; // 构造函数 实例化类的时候触发方法</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName(name:string):string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setNmae(name:string):void &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao1&apos;)</span><br><span class="line">console.log(p.getName()) // xiao1</span><br><span class="line">p.setName(&apos;xiao ming&apos;)</span><br><span class="line">console.log(p.getName()) // xiao ming</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line"></span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><h4 id="ts中实现继承-extends-super"><a href="#ts中实现继承-extends-super" class="headerlink" title="ts中实现继承 extends\ super"></a>ts中实现继承 extends\ super</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line">console.log(r.run())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class Web extends Person &#123;</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;super&apos;)</span><br><span class="line">console.log(w.run())</span><br></pre></td></tr></table></figure><h4 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td> public</td><td>公有</td><td>在当前类里面 子类 类外面都可以访问</td></tr><tr><td> protected</td><td>保护类型</td><td>在当前类里面 子类可以访问, 类外部无法访问</td></tr><tr><td> priviate</td><td>私有</td><td>在当前类里面可以访问, 子类,类外部无法访问</td></tr></tbody></table><p> <em>属性如果不写修饰符,则是公有</em></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> class Person &#123;</span><br><span class="line">    public name: string // 公有</span><br><span class="line">    // protected name: string // 保护</span><br><span class="line">    // priviate name: string // 私有</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><ul><li>静态属性和静态方法在其定义前加 <code>static</code></li><li>静态方法 里面没法直接调用类里面的属性</li></ul><p>es5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 实例化方法</span><br><span class="line">function Person () &#123;</span><br><span class="line">    this.run1 = function() &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 静态方法</span><br><span class="line">Person.name = &apos;哈哈&apos;</span><br><span class="line">Person.run2 = function() &#123;&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person() </span><br><span class="line">Person.run() // 静态方法的调用</span><br></pre></td></tr></table></figure></p><p>ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    public name:string</span><br><span class="line">    static sex = &apos;man&apos; // 静态属性</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;在运动`)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    work() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;在工作`)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 静态方法 里面没法直接调用类里面的属性</span><br><span class="line">    static print() &#123;</span><br><span class="line">        console.log(&apos;static&apos; + Person.sex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.print()</span><br><span class="line"></span><br><span class="line">console.log(Person.sex)</span><br></pre></td></tr></table></figure></p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>父类定义一个方法不去实现,让继承它的子类去实现, 每个子类有不同的表现 属于继承</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    name:string</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(&apos;eat ---- &apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        return this.name + &apos;吃东西&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        return this.name + &apos;吃猫粮&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li>它是提供其他继承的基类,不能直接被实例化</li><li>用<code>abstract</code>关键字定义抽象类和抽象方法,抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</li><li>abstract 抽象方法只能放在抽象类里面</li><li>抽象类和抽象方法用来定义标准</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 标准: Animal 这个类要求它的子类必须包含 eat 方法</span><br><span class="line">abstract class Animal &#123;</span><br><span class="line">    name:string</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 其他抽象类子类必须实现此方法</span><br><span class="line">    abstract eat():any &#123;</span><br><span class="line">        console.log(&apos;eat ---- &apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 其他方法可以不用实现</span><br><span class="line">    run() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// var a = new Animal() // 错误写法</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    constructor (name: any) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;吃狗粮`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dog = new Animal(&apos;dog&apos;)</span><br><span class="line">d.eat()</span><br></pre></td></tr></table></figure><h3 id="typescript-接口"><a href="#typescript-接口" class="headerlink" title="typescript 接口"></a>typescript 接口</h3><ul><li>属性类接口</li><li>函数类型接口</li><li>可索引接口</li><li>类类型接口</li><li>接口扩展</li></ul><h4 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h4><ul><li>自定义方法传入参数,对json的约束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function printLabel(&#123;labelInfo: &#123;label:string&#125;&#125;):void &#123;</span><br><span class="line">    console.log(&apos;printLabel&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// printLabel(&apos;hhh&apos;) // 错误写法</span><br><span class="line">// printLabel(&#123;name: &apos;xiao&apos;&#125;) // 错误写法</span><br><span class="line">printLabel(&#123;label: &apos;xiao ming&apos;&#125;) // 正确</span><br></pre></td></tr></table></figure><ul><li>对批量方法传入参数进行约束, 必须有关键字<code>interface</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">interface FullName &#123; </span><br><span class="line">    firstName: string; // 注意: 一定是 `;`结束</span><br><span class="line">    secondName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function printName(name: FullName) &#123;</span><br><span class="line">    console.log(`$&#123;name.firstName&#125;----$&#123;name.secondName&#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printInfo(info: FullName) &#123;</span><br><span class="line">    console.log(`$&#123;info.firstName&#125;----$&#123;info.secondName&#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    age: 20, </span><br><span class="line">    firstName : &apos;xiao&apos;,</span><br><span class="line">    secondName: &apos;ming&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var info = &#123;</span><br><span class="line">    firstName : &apos;xiao&apos;,</span><br><span class="line">    secondName: &apos;ming&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printName(obj)</span><br><span class="line"></span><br><span class="line">printInfo(info)</span><br></pre></td></tr></table></figure><h4 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h4><ul><li>对方法传入的参数以及返回值进行约束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface encrypt &#123;</span><br><span class="line">    (key:string, value:string):string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var md5:encrypt = function(key:string, value:string):string &#123;</span><br><span class="line">    return key+value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(md5(&apos;name&apos;, &apos;xiao&apos;))</span><br></pre></td></tr></table></figure><h4 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h4><ul><li>对数组对象约束,不常用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// ts 定义数组方式</span><br><span class="line">var arr:number[] = [12, 23]</span><br><span class="line"></span><br><span class="line">var arr1:Array&lt;string&gt;=[&apos;12&apos;, &apos;23&apos;]</span><br><span class="line"></span><br><span class="line">// 对数组约束</span><br><span class="line">interface UserArr &#123;</span><br><span class="line">    [index: number]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr2:UserArr = [&apos;aaa&apos;, &apos;bbb&apos;]</span><br><span class="line"></span><br><span class="line">console.log(arr2[0])</span><br><span class="line"></span><br><span class="line">// 对对象约束</span><br><span class="line">interface UserObj &#123;</span><br><span class="line">    [index:string]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr3:UserObj = [name: &apos;xiao ming&apos;]</span><br><span class="line"></span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure><h4 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h4><ul><li>对类的约束和抽象类有点相似</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  name: string</span><br><span class="line"></span><br><span class="line">  eat(str: string): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog implements Animal &#123;</span><br><span class="line">  name: string</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;吃狗粮&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var d = new Dog(&apos;dog&apos;)</span><br><span class="line"></span><br><span class="line">d.eat()</span><br></pre></td></tr></table></figure><h4 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h4><ul><li>接口可以继承接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  word(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Web implements Person &#123;</span><br><span class="line">  public name:string</span><br><span class="line">  constructor(name:string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;吃中餐&apos;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  work() &#123;</span><br><span class="line">      console.log(this.name + &apos;工作&apos;)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;xiao ku&apos;)</span><br><span class="line"></span><br><span class="line">w.eat()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  work(): void</span><br><span class="line">&#125;</span><br><span class="line">class Programmer &#123;</span><br><span class="line">  public name: string</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  coding(code: string) &#123;</span><br><span class="line">    console.log(this.name + code)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Web extends Programmer implements Person &#123;</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;喜欢吃馒头&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    console.log(this.name + &apos;写代码&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;小李&apos;)</span><br><span class="line"></span><br><span class="line">// w.eat()</span><br><span class="line">w.coding(&apos;敲代码&apos;)</span><br></pre></td></tr></table></figure><h3 id="typescript-泛型"><a href="#typescript-泛型" class="headerlink" title="typescript 泛型"></a>typescript 泛型</h3><ul><li>泛型的定义</li><li>泛型函数</li><li>泛型类</li><li>泛型接口</li></ul><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4><ul><li>泛型:软件工程中,不仅要创建一致定义良好的API, 组件不仅能够支持当前的数据类型,同事也能支持未来的数据类型,这在创建大型系统时为你提供十分灵活的功能</li><li>就是解决类接口,方法的复用性,以及对不特定数据类型的支持(类型校验)</li><li>可以支持不特定的数据类型, 但传入的参数和返回的参数一致</li></ul><p><strong>T表示泛型,具体什么类型是调用这个方法的时候决定的</strong></p><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(value:T):T &#123;</span><br><span class="line">    return value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDate&lt;number&gt;(123) // 正确</span><br><span class="line">getDate&lt;number&gt;(&apos;123&apos;) // 错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// any 返回指定值不报错,通常推荐以上写法</span><br><span class="line">function getData&lt;T&gt;(value:T):any &#123;</span><br><span class="line">    return value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDate&lt;number&gt;(123)</span><br><span class="line">getDate&lt;string&gt;(&apos;123&apos;)</span><br></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ul><li>比如有个最小堆算法,需要同时支持返回数字和字符串两种类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class MinClass &#123;</span><br><span class="line">  public list: number[] = []</span><br><span class="line"></span><br><span class="line">  add(num: number) &#123;</span><br><span class="line">    this.list.push(num)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min() &#123;</span><br><span class="line">    var minNum = this.list[0]</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class="line">      if (minNum &gt; this.list[i]) &#123;</span><br><span class="line">        minNum = this.list[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var m = new MinClass()</span><br><span class="line"></span><br><span class="line">m.add(289)</span><br><span class="line">m.add(22)</span><br><span class="line">m.add(23)</span><br><span class="line">m.add(28)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(m.min())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ts写法</span><br><span class="line"></span><br><span class="line">class MinClass&lt;T&gt; &#123;</span><br><span class="line">  public list: T[] = []</span><br><span class="line"></span><br><span class="line">  add(value:T):void &#123;</span><br><span class="line">    this.list.push(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min():T &#123;</span><br><span class="line">    var minNum = this.list[0]</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class="line">      if (minNum &gt; this.list[i]) &#123;</span><br><span class="line">        minNum = this.list[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var m1 = new MinClass&lt;number&gt;() // 实例化类, 并且指定了类的T代表类型是number</span><br><span class="line"></span><br><span class="line">m1.add(29)</span><br><span class="line">m1.add(22)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(m1.min())</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### 泛型接口</span><br></pre></td></tr></table></figure><p>函数类型接口<br>interface ConfigFn {<br>    (value1:string, value2 :string):string<br>}</p><p>var setData:configFn = function(value1:string,value2:string) {<br>    return value1+value2<br>}</p><p>setData(‘name’, ‘xiao ming’)</p><p>// 1.泛型接口<br>interface ConfigFn {<br>    <t>(value:T):T<br>}</t></p><p>var getData1:ConfigFn = function<t>(value:T):T {<br>    return value<br>}</t></p><p>getData1<string>(‘xiao xiao’) </string></p><p>// 2.泛型接口<br>interface ConfigFn<t> {<br>    (value:T):T<br>}</t></p><p>function getData3<t>(value:T):T {<br>    return value<br>}</t></p><p>var myGetData:ConfigFn<string> = getData3<br>myGetData(‘xiao hong’)<br><code>`</code></string></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;node 环境&lt;ul&gt;
&lt;li&gt;去官网下载个新版本 &lt;code&gt;https://nodejs.org/zh-cn
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac 使用Hexo + github 搭建个人博客详解</title>
    <link href="https://ai-ruby.github.io/2018/04/03/init%20hexo/"/>
    <id>https://ai-ruby.github.io/2018/04/03/init hexo/</id>
    <published>2018-04-03T03:32:40.613Z</published>
    <updated>2018-04-04T03:58:15.235Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Mac平台通过Hexo + github 搭建个人博客</p></blockquote><h2 id="Hexo-安装流程"><a href="#Hexo-安装流程" class="headerlink" title="Hexo 安装流程"></a>Hexo 安装流程</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 官网</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> 官网</li></ul><p>具体怎么安装就不细说了,在准备环境搭建好之后,就可以开始使用<code>Hexo</code>搭建博客了</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><blockquote><p>当Node.js和git都安装好了,就可以安装 Hexo, 在终端执行以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><blockquote><p>在自己项目目录下新建一个文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install ==&gt; 简写  npm i</span><br><span class="line">hexo server ==&gt; 简写 hexo s</span><br></pre></td></tr></table></figure><p>此时在浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到一个静态网页</p><h3 id="Hexo文件夹目录结构"><a href="#Hexo文件夹目录结构" class="headerlink" title="Hexo文件夹目录结构"></a>Hexo文件夹目录结构</h3><blockquote><ul><li>source：博客资源文件夹</li><li>source/_drafts：草稿文件夹</li><li>source/_posts：文章文件夹</li><li>themes：存放主题的文件夹</li><li>themes/landscape：默认的主题</li><li>_config.yml：全局配置文件</li></ul></blockquote><h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><ul><li>创建github账号并创建repository</li></ul><blockquote><p>博客发布到Github Pages上，供外网访问，当然你也可以部署到其他服务器上，Github Pages服务的使用步骤：</p><ul><li>开通Github账号，例如我的账号名CSDNHensen，这个后面会用到</li><li>创建一个repository，名称开头必须和账号名一样，然后以.github.io结尾</li></ul></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/github-repository.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>修改hexo的配置文件</li></ul><blockquote><ul><li>修改配置文件：_config.yml，整个站点的配置都在这里，打开_config.yml文件</li><li>找到下面的语句，然后修改你的信息，repository在github仓库中可以复制</li><li>github或者是coding 也行, 我是使用github的</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">            github: https://github.com/github名/github名.github.io</span><br><span class="line">            coding: https://git.coding.net/coding/coding.coding.me.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>注意项:<blockquote><ul><li>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错.*</li></ul></blockquote></li></ul><h3 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h3><ul><li>下载喜欢的主题<blockquote><ul><li>可到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网themes</a> 选择喜欢的主题</li></ul></blockquote></li></ul><blockquote><p>本主题是 <code>tomotoes</code></p></blockquote><p>在项目执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Tomotoes/hexo-theme-tomotoes themes/tomotoes</span><br></pre></td></tr></table></figure></p><ul><li>在配置文件下修改themes<blockquote><p>在项目_config.yml 找到 themes修改为tomotoes</p></blockquote></li></ul><p>可查看主题文档安装,以下不细说</p><hr><h2 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><blockquote><p>发布博客有两种方式: 一:通过命令行生成博客样板; 二:直接用markdown文档写完后放置/source/_posts目录下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new HelloWord</span><br></pre></td></tr></table></figure><blockquote><p>新生成的文章都会保存在/source/_posts目录下，打开生成的模板，内容如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Mac 使用Hexo + github 搭建个人博客详解</span><br><span class="line">abbrlink: 16107</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h3><blockquote><p>新增了博客文章后，需要提交到服务器上，输入以下指令完成将博客生成静态Html文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>hexo generate 简写  hexo g</p><h3 id="发布博客到服务器"><a href="#发布博客到服务器" class="headerlink" title="发布博客到服务器"></a>发布博客到服务器</h3><blockquote><p>安装hexo-deployer-git工具，输入指令<br><em>如果是第一次发布的需要安装<code>hexo-deployer-git</code>工具</em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>提交到服务器上，提交过程中还需要输入github账号和密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>hexo deploy 简写 hexo d</p><blockquote><p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  // 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g      // 生成缓存和静态文件</span><br><span class="line">hexo d      // 重新部署到服务器</span><br></pre></td></tr></table></figure><hr><h2 id="Hexo快捷命令"><a href="#Hexo快捷命令" class="headerlink" title="Hexo快捷命令"></a>Hexo快捷命令</h2><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; //新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; //新建页面</span><br><span class="line">hexo generate //生成静态页面至public目录</span><br><span class="line">hexo server //开启预览访问端口（默认端口4000，ctrl+c关闭server）</span><br><span class="line">hexo deploy //将.deploy目录部署到服务器</span><br></pre></td></tr></table></figure><blockquote><p>简写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>快捷简写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g == hexo deploy -generate</span><br><span class="line">hexo g -d == hexo -deploy -deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在Mac平台通过Hexo + github 搭建个人博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hexo-安装流程&quot;&gt;&lt;a href=&quot;#Hexo-安装流程&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装流程&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
