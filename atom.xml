<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ai-ruby博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ai-ruby.github.io/"/>
  <updated>2018-08-17T03:23:11.141Z</updated>
  <id>https://ai-ruby.github.io/</id>
  
  <author>
    <name>ai-ruby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端弹窗滑动引起底部body窗体滚动的bug处理</title>
    <link href="https://ai-ruby.github.io//posts/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84bug/"/>
    <id>https://ai-ruby.github.io//posts/移动端的bug/</id>
    <published>2018-08-17T03:20:38.329Z</published>
    <updated>2018-08-17T03:23:11.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 浮层滚动阻止window窗体滚动的bug处理</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>关于弹窗滑动会引起底部body滚动这个bug,上网找了好久也没有一个特别好的解决方法,终于在张老师的网站里终于看到了希望,哈哈,于是就有了这篇文章.具体实现代码就是都是张老师的文章<a href="https://www.zhangxinxu.com/wordpress/2016/12/web-mobile-scroll-prevent-window-js-css/" target="_blank" rel="noopener">web移动端浮层滚动阻止window窗体滚动JS/CSS处理</a></p></li><li><p>看了网上的案例做法是:弹窗出现的时候,设置body属性 <code>overflow:hidden</code>,记录下当前body滑动的<code>scrollTop</code>,然后在弹窗消失之后,把这个<code>scrollTop</code>赋值到body的<code>scrollTop</code>,这样的做法,在弹窗消失的时候,body窗口就会滚动下再回到你指定的<code>scrollTop</code>上.动弹的效果令人无法接受</p></li><li><p>张老师的做法呢虽然也有把<code>body</code>设置为<code>overflow:hidden</code>,但是同时把弹窗禁止了滑动,监听弹窗需要滑动区域的<code>touchstart</code>和<code>touchmove</code>等<code>touch</code>事件,具体实现,看以下代码吧</p></li></ul><p><em>以下代码都是参照张老师网址代码</em> <a href="https://www.zhangxinxu.com/wordpress/2016/12/web-mobile-scroll-prevent-window-js-css/" target="_blank" rel="noopener">web移动端浮层滚动阻止window窗体滚动JS/CSS处理</a>如有冒犯请联系本人</p><h4 id="阻止移动端弹窗滚动引起底部body滚动处理"><a href="#阻止移动端弹窗滚动引起底部body滚动处理" class="headerlink" title="阻止移动端弹窗滚动引起底部body滚动处理"></a>阻止移动端弹窗滚动引起底部body滚动处理</h4><ul><li>在css上,在<code>html</code>标签上添加一个类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.noscroll,</span><br><span class="line">.noscroll body &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.noscroll body &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>弹窗出来,添加类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;html&apos;).addClass(&apos;noscroll&apos;);</span><br></pre></td></tr></table></figure><ul><li>弹窗消失,移除类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;html&apos;).removeClass(&apos;noscroll&apos;);</span><br></pre></td></tr></table></figure><ul><li>调用方法<ul><li>第一个参数是传对应弹窗对象. eg:$(‘#aside’)</li><li>第二个参数是传弹窗滚动的类名. eg:’.scrollable’</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.smartScroll(container, selectorScrollable);</span><br><span class="line"></span><br><span class="line">eg: $.smartScroll($(&apos;#aside&apos;), &apos;.scrollable&apos;);</span><br></pre></td></tr></table></figure><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><p>html和css代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;title&gt;移动端浮层内部滚动窗体不滚动的JS处理&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.button &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 240px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    background-color: #cd0000;</span><br><span class="line">    color: #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.button:hover &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside,</span><br><span class="line">.aside-overlay &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside &#123;</span><br><span class="line">    -webkit-transition: visibility .25s;</span><br><span class="line">    transition: visibility .25s;</span><br><span class="line">    z-index: 3;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside.active &#123;</span><br><span class="line">    -webkit-transition: none;</span><br><span class="line">    transition: none;</span><br><span class="line">    visibility: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside-overlay &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    -webkit-transition: opacity .25s;</span><br><span class="line">    transition: opacity .25s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active&gt;.aside-overlay &#123;</span><br><span class="line">    opacity: .6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside .module-footer &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside .module-header &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside .module-main &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 92px;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside .scrollable &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aside-content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    background-color: white;</span><br><span class="line">    -webkit-transition: transform .15s;</span><br><span class="line">    transition: transform .15s;</span><br><span class="line">    left: 60px;</span><br><span class="line">    top: 0;</span><br><span class="line">    height: 60%;</span><br><span class="line">    -webkit-transform: translateX(100%);</span><br><span class="line">    transform: translateX(100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active&gt;.aside-content &#123;</span><br><span class="line">    -webkit-transform: translate(0%, 0%);</span><br><span class="line">    transform: translate(0%, 0%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aside a:hover &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.noscroll,</span><br><span class="line">.noscroll body &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.noscroll body &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;main&quot;&gt;</span><br><span class="line">        &lt;h1&gt;移动端浮层内滚动窗体不滚动的JS处理&lt;/h1&gt;</span><br><span class="line">        &lt;button id=&quot;button&quot; class=&quot;button&quot;&gt;点我出弹窗哦&lt;/button&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;我是body底部......&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;body底部......到底啦&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;body底部......到底啦&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;body底部......到底啦&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;aside id=&quot;aside&quot; class=&quot;aside&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;aside-overlay hideAside&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;aside-content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;module module-filter-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;module-header&quot;&gt;</span><br><span class="line">                    弹窗固定头部</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;module-main scrollable&quot;&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;我是弹窗里可以滚动的部分哦&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;弹窗滚动到底啦......&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;弹窗滚动到底啦......&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;弹窗滚动到底啦......&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;module-footer&quot;&gt;</span><br><span class="line">                    &lt;nav class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        弹窗固定底部</span><br><span class="line">                    &lt;/nav&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/aside&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>js代码</p><p><em>注意:</em>调用参数的,具体看回上面的调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var elButton = $(&apos;#button&apos;),</span><br><span class="line">    elButtonWith = $(&apos;#buttonWith&apos;);</span><br><span class="line">var elAside = $(&apos;#aside&apos;);</span><br><span class="line">elButton.on(&apos;click&apos;, function() &#123;</span><br><span class="line">    elAside.addClass(&apos;active&apos;);</span><br><span class="line">    $(&apos;html&apos;).addClass(&apos;noscroll&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">elButtonWith.on(&apos;click&apos;, function() &#123;</span><br><span class="line">    elAside.addClass(&apos;active&apos;);</span><br><span class="line">    $.smartScroll(elAside, &apos;.scrollable&apos;);</span><br><span class="line">    elButton.html(elButton.html().replace(&apos;没有&apos;, &apos;已经&apos;));</span><br><span class="line">    $(&apos;html&apos;).addClass(&apos;noscroll&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;.hideAside&apos;).on(&apos;click&apos;, function() &#123;</span><br><span class="line">    $(&apos;html&apos;).removeClass(&apos;noscroll&apos;);</span><br><span class="line">    elAside.removeClass(&apos;active&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关键代码 <code>smartScroll</code> 具体实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$.smartScroll = function(container, selectorScrollable) &#123;</span><br><span class="line">    // 如果没有滚动容器选择器，或者已经绑定了滚动时间，忽略</span><br><span class="line">    if (!selectorScrollable || container.data(&apos;isBindScroll&apos;)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 是否是搓浏览器</span><br><span class="line">    // 自己在这里添加判断和筛选</span><br><span class="line">    var isSBBrowser;</span><br><span class="line"></span><br><span class="line">    var data = &#123;</span><br><span class="line">        posY: 0,</span><br><span class="line">        maxscroll: 0</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 事件处理</span><br><span class="line">    container.on(&#123;</span><br><span class="line">        touchstart: function(event) &#123;</span><br><span class="line">            var events = event.touches[0] || event;</span><br><span class="line"></span><br><span class="line">            // 先求得是不是滚动元素或者滚动元素的子元素</span><br><span class="line">            var elTarget = $(event.target);</span><br><span class="line"></span><br><span class="line">            if (!elTarget.length) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            console.log(elTarget, elTarget.parents(selectorScrollable))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var elScroll;</span><br><span class="line"></span><br><span class="line">            // 获取标记的滚动元素，自身或子元素皆可</span><br><span class="line">            if (elTarget.is(selectorScrollable)) &#123;</span><br><span class="line">                elScroll = elTarget;</span><br><span class="line">                console.log(11)</span><br><span class="line">            &#125; else if ((elScroll = elTarget.parents(selectorScrollable)).length == 0) &#123;</span><br><span class="line">                elScroll = null;</span><br><span class="line">                console.log(222)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!elScroll) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 当前滚动元素标记</span><br><span class="line">            data.elScroll = elScroll;</span><br><span class="line"></span><br><span class="line">            // 垂直位置标记</span><br><span class="line">            data.posY = events.pageY;</span><br><span class="line">            data.scrollY = elScroll.scrollTop();</span><br><span class="line">            // 是否可以滚动</span><br><span class="line">            data.maxscroll = elScroll[0].scrollHeight - elScroll[0].clientHeight;</span><br><span class="line">        &#125;,</span><br><span class="line">        touchmove: function(event) &#123;</span><br><span class="line">            // console.log(data)</span><br><span class="line">            // 如果不足于滚动，则禁止触发整个窗体元素的滚动</span><br><span class="line">            if (data.maxscroll &lt;= 0 || isSBBrowser) &#123;</span><br><span class="line">                // 禁止滚动</span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">            // 滚动元素</span><br><span class="line">            var elScroll = data.elScroll;</span><br><span class="line">            // 当前的滚动高度</span><br><span class="line">            var scrollTop = elScroll.scrollTop();</span><br><span class="line"></span><br><span class="line">            // 现在移动的垂直位置，用来判断是往上移动还是往下</span><br><span class="line">            var events = event.touches[0] || event;</span><br><span class="line">            // 移动距离</span><br><span class="line">            var distanceY = events.pageY - data.posY;</span><br><span class="line"></span><br><span class="line">            if (isSBBrowser) &#123;</span><br><span class="line">                elScroll.scrollTop(data.scrollY - distanceY);</span><br><span class="line">                elScroll.trigger(&apos;scroll&apos;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 上下边缘检测</span><br><span class="line">            if (distanceY &gt; 0 &amp;&amp; scrollTop == 0) &#123;</span><br><span class="line">                // 往上滑，并且到头</span><br><span class="line">                // 禁止滚动的默认行为</span><br><span class="line">                event.preventDefault();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 下边缘检测</span><br><span class="line">            if (distanceY &lt; 0 &amp;&amp; (scrollTop + 1 &gt;= data.maxscroll)) &#123;</span><br><span class="line">                // 往下滑，并且到头</span><br><span class="line">                // 禁止滚动的默认行为</span><br><span class="line">                event.preventDefault();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        touchend: function() &#123;</span><br><span class="line">            data.maxscroll = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 防止多次重复绑定</span><br><span class="line">    container.data(&apos;isBindScroll&apos;, true);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 浮层滚动阻止window窗体滚动的bug处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于弹
      
    
    </summary>
    
      <category term="移动端的bug" scheme="https://ai-ruby.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84bug/"/>
    
    
      <category term="移动端的bug" scheme="https://ai-ruby.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84bug/"/>
    
  </entry>
  
  <entry>
    <title>vue + canvas + Qrcode</title>
    <link href="https://ai-ruby.github.io//posts/canvas%E5%AE%9E%E6%88%98/"/>
    <id>https://ai-ruby.github.io//posts/canvas实战/</id>
    <published>2018-08-17T02:33:39.372Z</published>
    <updated>2018-08-17T03:30:42.291Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在vue里 利用canvas API 生成二维码,指定用户名头像,生成一张图片以作分享</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>之前在vue项目中,要用到canvas, 把用户的头像和用户名的二维码添加一个背景图上生成一张图片用作分享的功能</li></ul><p>具体怎么把头像和二维码实现成一张分享图的代码不一一写上来了,具体说下做这个遇到的坑,或许就是能帮助你避免这些踩坑时间了</p><h4 id="渲染先后顺序"><a href="#渲染先后顺序" class="headerlink" title="渲染先后顺序"></a>渲染先后顺序</h4><ul><li>哪个渲染前,则层级越低,反之越高. 预防把背景图写到最后了,渲染出来的都被背景图挡住就一脸懵逼了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 初始化画布和其他信息</span><br><span class="line">const winWid = $(document.body).width()</span><br><span class="line">const winH = $(document.body).height()</span><br><span class="line">const codeLeft = winWid / 2 - 90</span><br><span class="line">const draw = document.getElementById(&apos;image-box&apos;)</span><br><span class="line">const ctx = draw.getContext(&apos;2d&apos;)</span><br><span class="line"></span><br><span class="line">// 图片处理</span><br><span class="line">const img = new Image()</span><br><span class="line">const codeImg = new Image()</span><br><span class="line">const headImg = new Image()</span><br><span class="line"></span><br><span class="line">// 设置画板宽高</span><br><span class="line">img.width = winWid</span><br><span class="line"></span><br><span class="line">draw.width = winWid</span><br><span class="line">draw.height = winH * 0.82</span><br><span class="line"></span><br><span class="line">this.newHeight = draw.height</span><br><span class="line"></span><br><span class="line">img.src = this.initUrl</span><br><span class="line">headImg.src = this.headUrl</span><br><span class="line">codeImg.src = this.codeUrl</span><br><span class="line"></span><br><span class="line">// 渲染图片</span><br><span class="line">img.onload = () =&gt; &#123;</span><br><span class="line">    // 初始化画布</span><br><span class="line">    // 画板处理</span><br><span class="line">    ctx.drawImage(img, 0, 0, draw.width, draw.height)</span><br><span class="line"></span><br><span class="line">    // 文字处理</span><br><span class="line">    this.textLine(ctx, winWid)</span><br><span class="line"></span><br><span class="line">    // 头像</span><br><span class="line">    this.rounderAvar(ctx, headImg)</span><br><span class="line"></span><br><span class="line">    // 二维码</span><br><span class="line">    this.roundedRect(ctx, codeLeft + 30, draw.height - 135, 120, 120, 10)</span><br><span class="line">    ctx.drawImage(codeImg, codeLeft + 40, draw.height - 125, 100, 100)</span><br><span class="line"></span><br><span class="line">    // canvas转换成二进制图片</span><br><span class="line">    this.newSrc = draw.toDataURL(&apos;image/png&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的文字处理和二维码方法都封装了函数,上面的顺序只是说明渲染的顺序</p><h4 id="加入二维码插件"><a href="#加入二维码插件" class="headerlink" title="加入二维码插件"></a>加入二维码插件</h4><ul><li><p>生成的二维码后不能注销清除,这样的话,再次生成的二维码还是原来的二维码,新的不能替换旧的</p></li><li><p>做法: 其实就是把插件生成的二维码隐藏了,把二维码生成的图片赋值一个变量,在canvas渲染的时候,把这个变量放到对应位置,按顺序渲染即可</p></li><li><p>可能在说的过程中还是不太理解,只有撸了一把才知道坑的所在,所以只能说到那么多了  </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        // 画板</span><br><span class="line">        &lt;canvas id=&quot;image-box&quot; width=&quot;100%&quot; height=&quot;911&quot;&gt;Canvas画板&lt;/canvas&gt;</span><br><span class="line">        </span><br><span class="line">        // canvas 渲染真正的图片</span><br><span class="line">        &lt;img class=&quot;newImg&quot; :src=&quot;newSrc&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        // 插件生成的二维码</span><br><span class="line">        &lt;div id=&quot;code&quot; class=&quot;hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import QRCode from &apos;qrcodejs2&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            newSrc: &apos;&apos;, // 画布生成的图片</span><br><span class="line">            codeUrl: &apos;&apos;, // 二维码图片</span><br><span class="line">            qrcode: &apos;&apos; // 二维码</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        // 先生成二维码 </span><br><span class="line">        initQrcode()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 生成二维码</span><br><span class="line">        initQrcode() &#123;</span><br><span class="line">            this.qrcode = new QRCode(&apos;code&apos;, &#123;</span><br><span class="line">                text: this.link,</span><br><span class="line">                width: 140,</span><br><span class="line">                height: 140,</span><br><span class="line">                colorDark: &apos;#000000&apos;,</span><br><span class="line">                colorLight: &apos;#ffffff&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">            // 将生成二维码的图片赋给 codeUrl</span><br><span class="line">            this.codeUrl = this.qrcode._el.children[0].toDataURL(&apos;image/png&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        // 初始化画布</span><br><span class="line">        initCanvas: function() &#123;</span><br><span class="line">            // 初始化画布和其他信息</span><br><span class="line">            const winWid = $(document.body).width()</span><br><span class="line">            const winH = $(document.body).height()</span><br><span class="line">            const codeLeft = winWid / 2 - 90</span><br><span class="line">            const draw = document.getElementById(&apos;image-box&apos;)</span><br><span class="line">            const ctx = draw.getContext(&apos;2d&apos;)</span><br><span class="line"></span><br><span class="line">            // 图片处理</span><br><span class="line">            const img = new Image()</span><br><span class="line">            const codeImg = new Image()</span><br><span class="line">            const headImg = new Image()</span><br><span class="line">            img.width = winWid</span><br><span class="line"></span><br><span class="line">            draw.width = winWid</span><br><span class="line">            draw.height = winH * 0.82</span><br><span class="line"></span><br><span class="line">            this.newHeight = draw.height</span><br><span class="line"></span><br><span class="line">            img.src = this.initUrl</span><br><span class="line">            headImg.src = this.headUrl</span><br><span class="line">            codeImg.src = this.codeUrl // 二维码图片链接</span><br><span class="line"></span><br><span class="line">            // 渲染图片</span><br><span class="line">            img.onload = () =&gt; &#123;</span><br><span class="line">                // 初始化画布</span><br><span class="line">                // 画板处理</span><br><span class="line">                ctx.drawImage(img, 0, 0, draw.width, draw.height)</span><br><span class="line"></span><br><span class="line">                // 文字处理</span><br><span class="line">                this.textLine(ctx, winWid)</span><br><span class="line"></span><br><span class="line">                // 头像</span><br><span class="line">                this.rounderAvar(ctx, headImg)</span><br><span class="line"></span><br><span class="line">                // 二维码</span><br><span class="line">                this.roundedRect(ctx, codeLeft + 30, draw.height - 135, 120, 120, 10)</span><br><span class="line">                ctx.drawImage(codeImg, codeLeft + 40, draw.height - 125, 100, 100)</span><br><span class="line"></span><br><span class="line">                // canvas转换成二进制图片</span><br><span class="line">                this.newSrc = draw.toDataURL(&apos;image/png&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            this.codeUrl = &apos;&apos;</span><br><span class="line">            this.qrcode.clear()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在vue里 利用canvas API 生成二维码,指定用户名头像,生成一张图片以作分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言
      
    
    </summary>
    
      <category term="canvas" scheme="https://ai-ruby.github.io/categories/canvas/"/>
    
    
      <category term="canvas" scheme="https://ai-ruby.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>canvas 邀请卡实战</title>
    <link href="https://ai-ruby.github.io//posts/canvas%E5%AE%9E%E6%88%98/"/>
    <id>https://ai-ruby.github.io//posts/canvas实战/</id>
    <published>2018-08-16T09:20:54.342Z</published>
    <updated>2018-08-16T09:28:03.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>利用canvas API 将 邀请卡 生成图片,可预览|下载单图|下载多图</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><code>canvas</code>是<code>html5</code>提供的一个新的功能,就是一个画布,<code>JavaScript</code>就像一个画笔,帮你描绘出你想要的画面,再叫上 <code>css3</code>新属性, 加上<code>transtion</code>等属性,分分动起来也是可以的.</li></ul><ul><li><p>之前学到<code>canvas</code>时只是在 <code>w3scholl</code>学到的一些 API用法, 开发过程也没具体怎么用到这个属性.直到前几个月公司想做一个功能,刚好就用上了.这个功能是想将该商城用户的头像取到,并且生成一张图片以便分享.那时候做完后一直想做起笔记,久而久之又把它落下了,直到最近看到一个更加有趣的,接近度和我那个项目的有点像,所以就有了这样的笔记了.</p></li><li><p>关于基础用法,可以看canvas的 API, 之后有可能会写下来.这个笔记呢主要是关于用<code>canvas</code>生成图片并且下载的实战</p></li></ul><p>具体代码参考 <a href="https://juejin.im/post/5a31dbc951882510b27563b9" target="_blank" rel="noopener">掘金文章 canvas入门实战</a></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><ul><li>为什么要先说踩坑呢?因为是挽回你复制好代码想要撸一番代码却没有成功的失落感啊!</li></ul><h4 id="canvas-跨域问题"><a href="#canvas-跨域问题" class="headerlink" title="canvas 跨域问题"></a>canvas 跨域问题</h4><ul><li><p>现象: 在使用<code>canvas的toDataURL()</code>方法时，控制台有时会报错：Uncaught DOMException: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p></li><li><p>原因: 这是由于之前由drawImage（）向canvas导入的图片跨域而导致的.</p></li><li><p>解决: 必须保证是在同一个服务器上操作,如果本地有开启服务器的,那直接打开你指向端口的localhost就好了,如果没有,那只能放在线上的服务器继续下面的代码了</p></li></ul><p>在网上搜索所在引用图片之前打开跨域资源就可以解决,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var image = new Image();</span><br><span class="line">image.setAttribute(&quot;crossOrigin&quot;, &apos;Anonymous&apos;); // 解决跨域 </span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">img.crossOrigin=&quot;anonymous&quot;; // 解决跨域</span><br><span class="line">img.src=&quot;图片地址&quot;;</span><br></pre></td></tr></table></figure><p>但是在本地没有开启服务器之前加了这句话还是会报错的,只有选了图片之后再去操作预览或下载等功能就不会报错.我想是不是重新选择图片之后,这时候的图片链接就是当前同一个服务器地址一致才不会有问题,后来把项目加入服务器后就能正常操作了,所以总的来说,项目要在服务器上就没问题了</p><p>好了,下面开始说实例了,例外我在原参考文章的代码中,添加一个图片是否显示全的功能, 那就开始好好的撸一场吧!</p><h3 id="邀请卡实例"><a href="#邀请卡实例" class="headerlink" title="邀请卡实例"></a>邀请卡实例</h3><ul><li><p>本次代码主要参考 <a href="https://juejin.im/post/5a31dbc951882510b27563b9" target="_blank" rel="noopener">掘金文章 canvas入门实战</a> 其中有修改的部分,具体代码解释可以访问此网址</p></li><li><p>先把布局弄好 </p></li></ul><p>html&amp;css代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;下载图片&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .set-option &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 400px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .set-option .text &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        padding-left: 10px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .set-option td &#123;</span><br><span class="line">        padding: 10px 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .set-option td:first-child &#123;</span><br><span class="line">        text-align: right;</span><br><span class="line">        padding-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .set-option p &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        line-height: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .check-box &#123;</span><br><span class="line">        width: 16px;</span><br><span class="line">        height: 16px;</span><br><span class="line">        margin: 0;</span><br><span class="line">        vertical-align: top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    button &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        border: none;</span><br><span class="line">        color: #fff;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        display: block;</span><br><span class="line">        margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    button:hover &#123;</span><br><span class="line">        opacity: .9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-all &#123;</span><br><span class="line">        background: #f90;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-save &#123;</span><br><span class="line">        background: #09f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-download &#123;</span><br><span class="line">        background: #4CAF50;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;set-option&quot;&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;画布尺寸&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; class=&quot;text&quot; id=&quot;size&quot; /&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;背景图片&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;跟随画布大小,图片则显示画布大小,不填满&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;checkbox&quot; class=&quot;check-box&quot; value=&quot;1&quot; id=&quot;fill&quot;&gt;&lt;/p&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; class=&quot;text&quot; id=&quot;user-name&quot; /&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;用户名x坐标&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;number&quot; class=&quot;text&quot; id=&quot;text-option-x&quot; /&gt;</span><br><span class="line">                        &lt;/br&gt;</span><br><span class="line">                        &lt;p&gt;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; class=&quot;check-box&quot; value=&quot;1&quot; id=&quot;is-center-x&quot;&gt;居中显示&lt;/p&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;用户名y坐标&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;number&quot; class=&quot;text&quot; id=&quot;text-option-y&quot; /&gt;</span><br><span class="line">                        &lt;/br&gt;</span><br><span class="line">                        &lt;p&gt;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; class=&quot;check-box&quot; value=&quot;1&quot; id=&quot;is-center-y&quot;&gt;居中显示&lt;/p&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;用户名字体大小&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;number&quot; class=&quot;text&quot; id=&quot;text-size&quot; /&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;文字颜色&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; class=&quot;text&quot; id=&quot;text-color&quot; /&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;图片类型&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;select type=&quot;text&quot; class=&quot;text&quot; id=&quot;img-type&quot;&gt;</span><br><span class="line">                            &lt;option value=&quot;jpg&quot;&gt;jpg&lt;/option&gt;</span><br><span class="line">                            &lt;option value=&quot;png&quot;&gt;png&lt;/option&gt;</span><br><span class="line">                        &lt;/select&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">            &lt;button id=&quot;save-image&quot; class=&quot;btn-save&quot;&gt;效果预览&lt;/button&gt;</span><br><span class="line">            &lt;button id=&quot;download-img&quot; class=&quot;btn-download&quot;&gt;下载当前图片&lt;/button&gt;</span><br><span class="line">            &lt;button id=&quot;download-all&quot; class=&quot;btn-all&quot;&gt;批量导出&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;show-canvas&quot;&gt;</span><br><span class="line">            &lt;canvas width=200 height=200 id=&quot;thecanvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>js代码:</p><ul><li>首先配置好默认值,有个初始化值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var option = &#123;</span><br><span class="line">    img: &apos;./test.png&apos;,</span><br><span class="line">    width: 500,</span><br><span class="line">    height: 350,</span><br><span class="line">    fontSize: &quot;20px Microsoft YaHei&quot;,</span><br><span class="line">    color: &quot;black&quot;,</span><br><span class="line">    text: &apos;守候&apos;,</span><br><span class="line">    imgType: &apos;jpg&apos;,</span><br><span class="line">    x: 30,</span><br><span class="line">    y: 30,</span><br><span class="line">    xCenter: false,</span><br><span class="line">    yCenter: false,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>初始化画布, 只是一个初步效果,后面会加多一些更完整的画布代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//画图</span><br><span class="line">function draw(obj) &#123;</span><br><span class="line">    var canvas = document.getElementById(&quot;thecanvas&quot;);</span><br><span class="line">    //画布大小</span><br><span class="line">    canvas.width = obj.width;</span><br><span class="line">    canvas.height = obj.height;</span><br><span class="line">    //设置图片</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = obj.img;</span><br><span class="line">    var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    //设置字体的坐标</span><br><span class="line">    var _x = obj.x, _y = obj.y;</span><br><span class="line">    //是否居中显示</span><br><span class="line">    if (obj.xCenter) &#123;</span><br><span class="line">        _x = obj.width / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    if (obj.yCenter) &#123;</span><br><span class="line">        _y = obj.height / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    //图片加载后</span><br><span class="line">    img.onload = function () &#123;</span><br><span class="line">        //先画图片</span><br><span class="line">        if(option.fill) &#123;</span><br><span class="line">        ctx.drawImage(img,0, 0, option.width, option.height);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">            ctx.drawImage(img,0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置文字的大小</span><br><span class="line">        ctx.font = obj.fontSize;</span><br><span class="line">        //设置文字的颜色</span><br><span class="line">        ctx.fillStyle = obj.color;</span><br><span class="line">        //设置文字坐标</span><br><span class="line">        if (obj.xCenter) &#123;</span><br><span class="line">            ctx.textAlign = &quot;center&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //画文字</span><br><span class="line">        ctx.fillText(obj.text, _x, _y);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态更改参数</li></ul><h4 id="更改尺寸"><a href="#更改尺寸" class="headerlink" title="更改尺寸"></a>更改尺寸</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//画布尺寸</span><br><span class="line">//获取按钮</span><br><span class="line">var size = document.getElementById(&quot;size&quot;);</span><br><span class="line">size.addEventListener(&quot;blur&quot;, function() &#123;</span><br><span class="line">    //根据空格，区分高宽</span><br><span class="line">    var _width = parseInt(size.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;).split(/\s+/)[0]),</span><br><span class="line">        _height = parseInt(size.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;).split(/\s+/)[1]);</span><br><span class="line">    //把参数的width和height改掉</span><br><span class="line">    option.width = _width || 500;</span><br><span class="line">    option.height = _height || 350;</span><br><span class="line">    //重新画图</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更改图片"><a href="#更改图片" class="headerlink" title="更改图片"></a>更改图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//选择图片</span><br><span class="line">//获取图片控件</span><br><span class="line">var file = document.getElementById(&quot;file&quot;),</span><br><span class="line">    imagesFile, imageData;</span><br><span class="line">file.addEventListener(&apos;change&apos;, function(e) &#123;</span><br><span class="line">    //获取图片</span><br><span class="line">    imagesFile = e.target.files[0];</span><br><span class="line">    //把图片转base64</span><br><span class="line">    var reader = new FileReader();</span><br><span class="line">    reader.readAsDataURL(imagesFile);</span><br><span class="line">    //图片加载后</span><br><span class="line">    reader.onload = function(e) &#123;</span><br><span class="line">        //设置option的img属性，再冲洗年绘制</span><br><span class="line">        imageData = this.result;</span><br><span class="line">        option.img = imageData;</span><br><span class="line">        draw(option);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更改图片大小"><a href="#更改图片大小" class="headerlink" title="更改图片大小"></a>更改图片大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//图片大小</span><br><span class="line">//获取按钮</span><br><span class="line">var fill = document.getElementById(&quot;fill&quot;);</span><br><span class="line">fill.addEventListener(&quot;input&quot;, function() &#123;</span><br><span class="line">    if (fill.checked) &#123;</span><br><span class="line">        option.fill = false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        option.fill = true;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//用户名</span><br><span class="line">var userName = document.getElementById(&quot;user-name&quot;);</span><br><span class="line">userName.addEventListener(&quot;blur&quot;, function() &#123;</span><br><span class="line">    var _text = userName.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;).split(/\s+/);</span><br><span class="line">    option.text = _text[0];</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更改横纵坐标值"><a href="#更改横纵坐标值" class="headerlink" title="更改横纵坐标值"></a>更改横纵坐标值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 横坐标</span><br><span class="line">var optionX = document.getElementById(&quot;text-option-x&quot;);</span><br><span class="line">optionX.value = option.x;</span><br><span class="line">var optionXCenter = document.getElementById(&quot;is-center-x&quot;);</span><br><span class="line">optionX.addEventListener(&quot;input&quot;, function() &#123;</span><br><span class="line">    if (optionXCenter.checked) &#123;</span><br><span class="line">        option.xCenter = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        option.xCenter = false;</span><br><span class="line">        option.x = parseInt(optionX.value);</span><br><span class="line">    &#125;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br><span class="line">optionXCenter.addEventListener(&quot;change&quot;, function() &#123;</span><br><span class="line">    if (optionXCenter.checked) &#123;</span><br><span class="line">        option.xCenter = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        option.xCenter = false;</span><br><span class="line">        option.x = parseInt(optionX.value);</span><br><span class="line">    &#125;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br><span class="line">//纵坐标</span><br><span class="line">var optionY = document.getElementById(&quot;text-option-y&quot;);</span><br><span class="line">optionY.value = option.y;</span><br><span class="line">var optionYCenter = document.getElementById(&quot;is-center-y&quot;);</span><br><span class="line">optionY.addEventListener(&quot;input&quot;, function() &#123;</span><br><span class="line">    if (optionYCenter.checked) &#123;</span><br><span class="line">        option.yCenter = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        option.yCenter = false;</span><br><span class="line">        option.y = parseInt(optionY.value);</span><br><span class="line">    &#125;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br><span class="line">//是否垂直居中显示</span><br><span class="line">optionYCenter.addEventListener(&quot;change&quot;, function() &#123;</span><br><span class="line">    if (optionYCenter.checked) &#123;</span><br><span class="line">        option.yCenter = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        option.yCenter = false;</span><br><span class="line">        option.y = parseInt(optionY.value);</span><br><span class="line">    &#125;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更改字体颜色大小"><a href="#更改字体颜色大小" class="headerlink" title="更改字体颜色大小"></a>更改字体颜色大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//字体颜色</span><br><span class="line">var textColor = document.getElementById(&quot;text-color&quot;);</span><br><span class="line">textColor.addEventListener(&quot;blur&quot;, function() &#123;</span><br><span class="line">    textColor.value === &quot;&quot; ? option.color = &quot;#fff&quot; : option.color = &apos;#&apos; + textColor.value;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br><span class="line">//字体大小</span><br><span class="line">var textSize = document.getElementById(&quot;text-size&quot;);</span><br><span class="line">textSize.addEventListener(&quot;input&quot;, function() &#123;</span><br><span class="line">    textSize.value === &quot;&quot; ? option.fontSize = &apos;20px Microsoft YaHei&apos; : option.fontSize = textSize.value + &apos;px Microsoft YaHei&apos;;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h4><p>就是预览当前canvas的一个效果，这个就很简单了，就是新开一个窗口，然后把图片写进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//预览图片</span><br><span class="line">function saveImageInfo() &#123;</span><br><span class="line">    var mycanvas = document.getElementById(&quot;thecanvas&quot;);</span><br><span class="line">    //生成图片</span><br><span class="line">    var image = mycanvas.toDataURL(&quot;image/png&quot;);</span><br><span class="line">    console.log(&apos;save&apos;)</span><br><span class="line">    var w = window.open(&apos;about:blank&apos;, &apos;image from canvas&apos;);</span><br><span class="line">    //把图片新进新的窗口</span><br><span class="line">    w.document.write(&quot;&lt;img src=&apos;&quot; + image + &quot;&apos; alt=&apos;from canvas&apos;/&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var saveButton = document.getElementById(&quot;save-image&quot;);</span><br><span class="line">saveButton.addEventListener(&apos;click&apos;, saveImageInfo);</span><br><span class="line">//图片类型</span><br><span class="line">var imgType = document.getElementById(&quot;img-type&quot;);</span><br><span class="line">imgType.addEventListener(&quot;change&quot;, function() &#123;</span><br><span class="line">    option.imgType = this.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//下载图片</span><br><span class="line">var downButton = document.getElementById(&quot;download-img&quot;);</span><br><span class="line">downButton.addEventListener(&apos;click&apos;, downloadImg);</span><br><span class="line">function downloadImg(fileName) &#123;</span><br><span class="line">    //获取canvas</span><br><span class="line">    var myCanvas = document.getElementById(&quot;thecanvas&quot;);</span><br><span class="line">    //设置图片类型</span><br><span class="line">    var image = myCanvas.toDataURL(&quot;image/&quot; + option.imgType).replace(&quot;image/&quot; + option.imgType, &quot;image/octet-stream&quot;);</span><br><span class="line">    var save_link = document.createElementNS(&apos;http://www.w3.org/1999/xhtml&apos;, &apos;a&apos;);</span><br><span class="line">    save_link.href = image;</span><br><span class="line">    //设置下载图片的名称</span><br><span class="line">    if(!option.all) &#123;</span><br><span class="line">    fileName = &apos;&apos;</span><br><span class="line">    save_link.download = option.text + &apos;.&apos; + option.imgType;</span><br><span class="line">    &#125; else if(fileName == &apos;&apos;)&#123;</span><br><span class="line">    save_link.download = &apos;canvas&apos; + &apos;.&apos; + option.imgType;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    save_link.download = fileName + &apos;.&apos; + option.imgType;</span><br><span class="line">    &#125;</span><br><span class="line">    //下载图片</span><br><span class="line">    var event = document.createEvent(&apos;MouseEvents&apos;);</span><br><span class="line">    event.initMouseEvent(&apos;click&apos;, true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);</span><br><span class="line">    save_link.dispatchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量导出"><a href="#批量导出" class="headerlink" title="批量导出"></a>批量导出</h4><ol><li>首先批量导出，那么用户名我这里是使用空格分割，那么现在我在option里面，弄一个字段textAll，所有文字的集合。all代表是否是批量下载。fn属性代表回调函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//批量导出</span><br><span class="line">var downloadAll = document.getElementById(&quot;download-all&quot;);</span><br><span class="line">downloadAll.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">    var _text = userName.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;).split(/\s+/);</span><br><span class="line">    option.textAll = _text;</span><br><span class="line">    option.all = true;</span><br><span class="line">    option.fn = downloadImg;</span><br><span class="line">    draw(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>这时候就要判断是否要全部绘制的情况,所以要修改绘制函数的draw</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">//画图</span><br><span class="line">function draw(obj) &#123;</span><br><span class="line">    var canvas = document.getElementById(&quot;thecanvas&quot;);</span><br><span class="line">    //画布大小</span><br><span class="line">    canvas.width = obj.width;</span><br><span class="line">    canvas.height = obj.height;</span><br><span class="line">    //设置图片</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = obj.img;</span><br><span class="line">    img.width = canvas.width;</span><br><span class="line">    img.height = canvas.height;</span><br><span class="line">    var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    //设置字体的坐标</span><br><span class="line">    var _x = obj.x, _y = obj.y;</span><br><span class="line">    //是否居中显示</span><br><span class="line">    if (obj.xCenter) &#123;</span><br><span class="line">        _x = obj.width / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    if (obj.yCenter) &#123;</span><br><span class="line">        _y = obj.height / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    //图片加载后</span><br><span class="line">    img.onload = function () &#123;</span><br><span class="line">        //是否是全部打印</span><br><span class="line">        if(obj.all)&#123;</span><br><span class="line">            //遍历textAll</span><br><span class="line">            for(var i=0;i&lt;obj.textAll.length;i++)&#123;</span><br><span class="line">                //绘制图片</span><br><span class="line">                if(option.fill) &#123;</span><br><span class="line">            ctx.drawImage(img,0, 0, option.width, option.height);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">                ctx.drawImage(img,0,0);</span><br><span class="line">            &#125;</span><br><span class="line">                //设置字体大小</span><br><span class="line">                ctx.font=obj.fontSize;</span><br><span class="line">                //设置字体颜色</span><br><span class="line">                ctx.fillStyle=obj.color;</span><br><span class="line">                //是否居中显示</span><br><span class="line">                if(obj.xCenter)&#123;</span><br><span class="line">                    ctx.textAlign=&quot;center&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                //绘制文字</span><br><span class="line">                ctx.fillText(obj.textAll[i], _x,_y);</span><br><span class="line">                //是否回调</span><br><span class="line">                if(obj.fn)&#123;</span><br><span class="line">                    obj.fn(obj.textAll[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //最后取消全部批量下载</span><br><span class="line">            obj.all=false;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">        if(option.fill) &#123;</span><br><span class="line">            ctx.drawImage(img,0, 0, option.width, option.height);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ctx.drawImage(img,0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">            ctx.font=obj.fontSize;</span><br><span class="line">            ctx.fillStyle=obj.color;</span><br><span class="line">            if(obj.xCenter)&#123;</span><br><span class="line">                ctx.textAlign=&quot;center&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.fillText(obj.text, _x,_y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;利用canvas API 将 邀请卡 生成图片,可预览|下载单图|下载多图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="canvas" scheme="https://ai-ruby.github.io/categories/canvas/"/>
    
    
      <category term="canvas" scheme="https://ai-ruby.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>puppeteer 爬虫入门</title>
    <link href="https://ai-ruby.github.io//posts/%E5%AD%A6%E4%B9%A0%20puppeteer%20%E5%85%A5%E9%97%A8/"/>
    <id>https://ai-ruby.github.io//posts/学习 puppeteer 入门/</id>
    <published>2018-07-27T06:51:12.150Z</published>
    <updated>2018-07-27T06:58:07.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习 puppeteer 简单模拟github登录页</p></blockquote><h2 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h2><p>Puppeteer是谷歌官方出品的一个通过DevTools协议控制headless Chrome的Node库。可以通过Puppeteer的提供的api直接控制Chrome模拟大部分用户操作来进行UI Test或者作为爬虫访问页面来收集数据。</p><p>它可以做什么? </p><ul><li>生成网页截图 或者 打印PDF</li><li>高级爬虫, 可以爬取大量异步渲染内容的网页</li><li>模拟键盘输入/表单自动提交/登录网页, 实现UI自动化测试</li><li>捕获站点的时间线,追踪网站,分析网站性能问题</li></ul><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>Puppeteer本身依赖6.4以上的Node，但是为了异步超级好用的async/await，推荐使用7.6版本以上的Node。另外headless Chrome本身对服务器依赖的库的版本要求比较高，centos服务器依赖偏稳定，v6很难使用headless Chrome，提升依赖版本可能出现各种服务器问题（包括且不限于无法使用ssh），最好使用高版本服务器。</p><ul><li>Node 7.6+</li></ul><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><ul><li>mkdir demo – 新建目录</li><li>cd demo – 进入 demo 目录</li><li>npm init – 初始化NPM,填入必要的信息(一直按确定即可)</li><li>npm i – save puppeteer – npm i == npm install , puppeteer 安装</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li>puppeteer.launch() 创建一个浏览器实例<code>Browser</code>对象</li><li>const page = await browser.newPage 通过<code>browser</code>对象创建页面 Page对象</li><li>page.goto() 跳转指定页面</li><li>page.screenshot() 对页面截图</li><li>page.pdf 生成pdf,可以打印下来</li></ul><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><ul><li>简单快速了解 puppeter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&apos;puppeteer&apos;)</span><br><span class="line"></span><br><span class="line">async function run () &#123;</span><br><span class="line">    const browser = await puppeteer.launch()</span><br><span class="line">    const page = await browser.newPage() // 新建一个浏览器页面</span><br><span class="line">    await page.goto(&apos;https://github.com&apos;) // 输入要爬虫的网址</span><br><span class="line">    </span><br><span class="line">    await page.waitFor(1000) // 等待1000</span><br><span class="line">    </span><br><span class="line">    // 截图保存到screenhots/目录下</span><br><span class="line">    await page.screenshot(&#123;path: &apos;screenshots/github.png&apos;&#125;)</span><br><span class="line">    </span><br><span class="line">    // 打印 pdf 操作</span><br><span class="line">    await page.pdf(&#123;path: &apos;example.pdf&apos;, format: &apos;A4&apos;&#125;)</span><br><span class="line">    </span><br><span class="line">    await page.waitForSeletor(&apos;.more&apos;) // 查找页面的元素</span><br><span class="line">    </span><br><span class="line">    await page.click(&apos;.more&apos;) // 默认点击后 获得数据</span><br><span class="line">    </span><br><span class="line">    // 提取元素内容方法 `evaluate`</span><br><span class="line">    const result = await page.evaluate(() =&gt; &#123;</span><br><span class="line">        const $ = window.$</span><br><span class="line">        console.log($) // 查看是否有引入jq, 为了更好查找你想要爬虫的元素数据</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    browser.close() // 浏览器关闭</span><br><span class="line">    </span><br><span class="line">    process.sennd(&#123;reult&#125;&#125; // 发送结果</span><br><span class="line">    process.close() // 程序关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意: puppeteer 运用Chromium in  <code>无界面模式</code>, 模拟browser打开浏览器,然后模拟你操作或者操作后得到的数据,获取数据后browser很快关闭</em></p><ul><li>动态模拟登陆 demo</li></ul><ol><li>新建一个 <code>creds.js</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 注意: &apos;&apos;为自己的用户名和密码</span><br><span class="line">module.expors = &#123; </span><br><span class="line">    username: &apos;&lt;GITHUB_USERNAME&gt;&apos; </span><br><span class="line">    password: &apos;&lt;GITHUB_PASSWORD&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>新建 <code>index.js</code></li></ol><p>在调用 <code>Puppeteer</code> 的 <code>launch</code> 方法的时候传入参数对象中带有 <code>headless: false</code>，即可启动其 GUI 界面，进行可视化调试。</p><p>常用方法：点击可以使用<code>page.click(selector[, options])</code>方法，也可以选择聚焦<code>page.focus(selector)</code>。<br>输入可以使用<code>page.type(selector, text[, options])</code>输入指定的字符串，还可以在options中设置delay缓慢输入更像真人一些。也可以使用<code>keyboard.down(key[, options])</code>来一个字符一个字符的输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&apos;puppeteer&apos;)</span><br><span class="line">const creds = reuqire(&apos;./creds&apos;) // 引入creds.js</span><br><span class="line"></span><br><span class="line">// 可立马执行</span><br><span class="line">;(async () =&gt; &#123;</span><br><span class="line">    const browser = await puppeteer.launch(&#123;</span><br><span class="line">        headless: false</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    const page = await.browser.newPage() </span><br><span class="line">    await page.goto(&apos;https://github.com/login&apos;)</span><br><span class="line">    </span><br><span class="line">    // 找到对应 输入用户名,密码,提交按钮</span><br><span class="line">    const USERNAME_SELECTOR = #user_login&apos;</span><br><span class="line">    const PASSWORD_SELECTOR = &apos;#user_password&apos;</span><br><span class="line">    const BUTTON_SELECTOR = &apos;#signup_button&apos;</span><br><span class="line">    </span><br><span class="line">    await page.click(USERNAME_SELECTOR);</span><br><span class="line">    await page.type(CREDS.username);</span><br><span class="line"></span><br><span class="line">    await page.click(PASSWORD_SELECTOR);</span><br><span class="line">    await page.type(CREDS.password);</span><br><span class="line"></span><br><span class="line">    await page.click(BUTTON_SELECTOR);</span><br><span class="line"></span><br><span class="line">    await page.waitForNavigation();</span><br><span class="line"></span><br><span class="line">    browser.close() // 浏览器关闭</span><br><span class="line">    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="快速了解使用-API"><a href="#快速了解使用-API" class="headerlink" title="快速了解使用 API"></a>快速了解使用 API</h2><ul><li><p>1.模拟页面点击</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">page.mouseMoved(x, y, options = &#123;&#125;)</span><br><span class="line">page.mousePressed(x, y, options = &#123;&#125;)</span><br><span class="line">page.mouseReleased(x, y, options = &#123;&#125;)</span><br><span class="line">page.tap(x, y, options = &#123;&#125;)</span><br><span class="line">page.touchmove()</span><br><span class="line">page.touchend()</span><br></pre></td></tr></table></figure></li><li><p>2.上下翻动页面</p><p>  page.evaluate 的 <code>window.scrollBy</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.evaluate(_ =&gt; &#123; window.scrollBy(0, window.innerHeight);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>3.获取element中的自定义属性</p><p>  page.evaluate 的 <code>object.getAttribute</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await page.evaluate( (obj) =&gt; &#123;</span><br><span class="line">  return obj.getAttribute(&apos;data-src&apos;);</span><br><span class="line">&#125;, imgurlEle);</span><br></pre></td></tr></table></figure></li><li><p>4.如何输入内容</p><ul><li><p>page.type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">await page.click(&apos;#user_name&apos;)</span><br><span class="line">page.type(&apos;name&apos;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* page.evalute 后 element.value <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">await page.evaluate((a, b) =&gt; &#123;</span><br><span class="line">   document.querySelector(&apos;#a&apos;).value = a;</span><br><span class="line">   document.querySelector(&apos;#b&apos;).value = b;</span><br><span class="line">   document.querySelector(&apos;#c&apos;).click();</span><br><span class="line"> &#125;, a, b);</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>5.获取页面html代码<br>  page.content()</p></li><li><p>6.关闭弹窗<br>  dialong.accept</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page.on(&apos;dialog&apos;, dialog =&gt; &#123;</span><br><span class="line">    dialog.accept(&apos;test&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>7.读取和设置 cookies<br>  page.setCookies 和 page.cookies 接口</p></li><li><p>8.上传文件</p><p>  elementHandle.uploadFile(…filePaths)接口, 目前只支持 input type=”file”类型的文件提交</p></li></ul><ul><li><p>9.监控页面的网络请求</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const page = await browser.newPage();</span><br><span class="line">await page.setRequestInterceptionEnabled(true);</span><br><span class="line"></span><br><span class="line">page.on(&apos;request&apos;, request =&gt; &#123;</span><br><span class="line">  request.continue(); // pass it through.</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">page.on(&apos;response&apos;, response =&gt; &#123;</span><br><span class="line">  const req = response.request();</span><br><span class="line">  console.log(req.method, response.status, req.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>10.如何在页面中不同的Frame中切换</p><p>  通过page.frames()获得frame的数组，使用 iframe.$ 来获得对应frame中的handle</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;headless: false&#125;);</span><br><span class="line">const page = await browser.newPage();</span><br><span class="line">await page.setContent(&apos;&lt;iframe&gt;&lt;/iframe&gt;&apos;);</span><br><span class="line"></span><br><span class="line">// the page.frames()[0] is always a main frame.</span><br><span class="line">const iframe = page.frames()[1];</span><br><span class="line">// fetch the body element of the iframe</span><br><span class="line">const body = await iframe.$(&apos;body&apos;);</span><br><span class="line">// ...</span><br><span class="line">// do something with `body`..</span><br><span class="line">// ...</span><br><span class="line">browser.close();</span><br></pre></td></tr></table></figure></li><li><p>11.page.evalute 能否返回page DOM?<br>  可以传入 <code>ObjectHandle</code>到page.evaluate中成为DOM元素，但当DOM被返回的时候则成 为对应的<code>ObjectHandle</code>.<br>  如果需要返回，也可以返回实际需要的值</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const list = await page.evaluateHandle(() =&gt; &#123;</span><br><span class="line">return Array.from(document.getElementsByTagName(&apos;a&apos;)).map(a =&gt; a.href);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(await list.jsonValue());</span><br></pre></td></tr></table></figure></li><li><p>12.避免页面ssl认证错误信息</p><p>  通过puppeteer option ignoredHTTPErrors 实现</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;学习 puppeteer 简单模拟github登录页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;puppeteer&quot;&gt;&lt;a href=&quot;#puppeteer&quot; class=&quot;headerlink&quot; title=&quot;puppeteer&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="爬虫" scheme="https://ai-ruby.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="puppeteer" scheme="https://ai-ruby.github.io/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>Learning Typescript</title>
    <link href="https://ai-ruby.github.io//posts/%E5%AD%A6%E4%B9%A0typescript/"/>
    <id>https://ai-ruby.github.io//posts/学习typescript/</id>
    <published>2018-07-27T03:31:04.000Z</published>
    <updated>2018-07-27T06:57:08.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习typescript 数据类型 | 相关函数 | 类 | 接口</p></blockquote><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>node 环境<ul><li>去官网下载个新版本 <code>https://nodejs.org/zh-cn/</code> 安装<code>node</code>的同时 <code>npm</code>也会安装起来的</li><li>输入node -v , npm-v后可看到版本号即安装成功</li></ul></li></ul><ul><li>全局安装Typescript, -g是全局<ul><li>npm install typescript -g</li><li>tsc -v</li></ul></li></ul><p><em>注意</em>如果是mac系统,则需要<code>sudo</code> </p><h3 id="简单编写hello-world"><a href="#简单编写hello-world" class="headerlink" title="简单编写hello world"></a>简单编写<code>hello world</code></h3><ul><li><p>1.初始化项目:进入你的编程文件夹后使用<code>npm init -y</code>初始化,生成 package.json 文件配置</p></li><li><p>2.typescript项目配置文件: 创建 <code>tsconfig.json</code>文件,命令行输入 <code>tsc --init</code>,此文件可以通过读取它来设置<code>Typescript编译器参数</code></p></li><li><p>3.安装@types/node: 使用 <code>npm install @type/node --dev-save</code>进行安装.主要是解决模块的声明文件问题</p></li><li><p>4.新建<code>HelloWorld.ts</code>文件,然后保存,代码如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:string = &quot;HelloWorld&quot;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure></li><li><p>5自动编译:</p><ul><li><p>若是在vscode编程的,在其任务菜单下,运行<code>生成任务</code>, 然后选择<code>tsc: 构建-tsconfig.json</code>,这时候会生成一个 <code>HelloWorld.js</code>,选择<code>tsc: 监视-tsconfig.json</code>,则时刻监控.ts文件</p></li><li><p>若是HBuilder: </p><ul><li>最上方菜单栏点击<code>工具-插件</code>安装</li><li>点击下方<code>浏览Eclipse插件市场</code></li><li>搜索 <code>typescript插件</code>进行安装后<code>重启编辑器</code></li><li>点击菜单栏<code>工具-选项</code>,选择编译ts文件<code>Typescript-Compiler - 勾选 Compiler all Typescript files on build</code></li><li>在<code>项目上右键</code>点击-<code>配置 Enalbe typescript builder</code>,之后再保存.ts文件时会自动在当前目录编译对应的目录</li></ul></li><li><p>不是自动编译的则在命令行输入 <code>tsc 文件名</code>,即可</p></li></ul></li></ul><h3 id="typescript中的数据类型"><a href="#typescript中的数据类型" class="headerlink" title="typescript中的数据类型"></a>typescript中的数据类型</h3><ul><li>typescript为了是编写代码更规范,更有利维护,增加类型的验证,提供以下的数据类型<ul><li>boolean 布尔类型</li><li>number  数字类型</li><li>string  字符串类型</li><li>array   数字类型</li><li>tuple   元组类型</li><li>enum    枚举类型</li><li>any     任意类型</li><li>null和undefined</li><li>voild 类型</li><li>never 其他类型</li></ul></li></ul><p><em>注意: ts代码必须指定类型</em></p><h4 id="boolean-布尔类型"><a href="#boolean-布尔类型" class="headerlink" title="boolean 布尔类型"></a>boolean 布尔类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// es5: 正确写法,但是在ts是错误写法</span><br><span class="line">var flag = false;</span><br><span class="line">flag = 456</span><br><span class="line"></span><br><span class="line">// ts写法:</span><br><span class="line">var flag:boolean = false</span><br><span class="line">flag = true // 正确</span><br><span class="line">// flag = 123 // 错误</span><br><span class="line">console.log(flag)</span><br></pre></td></tr></table></figure><h4 id="number和string类型和boolean类型定义一样"><a href="#number和string类型和boolean类型定义一样" class="headerlink" title="number和string类型和boolean类型定义一样"></a>number和string类型和boolean类型定义一样</h4><h4 id="array数组类型-ts有三种方式"><a href="#array数组类型-ts有三种方式" class="headerlink" title="array数组类型, ts有三种方式"></a>array数组类型, ts有三种方式</h4><ul><li><p>1.<code>arr:number[] = []</code></p><ul><li>指定arr数组里都是数字,如果有字符串或者其他类型会报错,即使运行成功,但是ts规则也会报错的 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1:number[]=[11, 22, 33] </span><br><span class="line"></span><br><span class="line">var arr2:number[]=[11, 22, &apos;33&apos;] // ts规则报错</span><br><span class="line"></span><br><span class="line">console.log(arr1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.<code>arr:Array&lt;number&gt;= []</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr3:Array&lt;number&gt;= [11, 22, 33]</span><br><span class="line"></span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li><code>arr:any[] = []</code></li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr4:any[] = [&apos;12&apos;, 23, true]</span><br><span class="line">console.log(arr4)</span><br></pre></td></tr></table></figure><h4 id="tuple-元组类型"><a href="#tuple-元组类型" class="headerlink" title="tuple 元组类型"></a>tuple 元组类型</h4><ul><li>属于数组一种, 可以数组或者是字符串,指定数组每一个位置中指定特定类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr:[number, string] = [123, &apos;this is ts&apos;] // 正确</span><br><span class="line"></span><br><span class="line">// let arr:[number, string] = [&apos;123&apos;, &apos;this is ts&apos;] // 错误</span><br></pre></td></tr></table></figure><h4 id="enum-枚举类型"><a href="#enum-枚举类型" class="headerlink" title="enum 枚举类型"></a>enum 枚举类型</h4><ul><li>事先考虑到某一个变量可能取到的值,尽量用自然语言中含义清楚的单词来表示它的每一个值 –就叫枚举方法,用这个方法定义的类型称枚举类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Flag &#123;success=1, error=2&#125;</span><br><span class="line">let s:Flag = Flag.success</span><br><span class="line"></span><br><span class="line">console.log(s) // 1</span><br></pre></td></tr></table></figure><ul><li>如果标识符没有赋值,则它的值就是下标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;blue, red, &apos;orange&apos;&#125;</span><br><span class="line"></span><br><span class="line">var c:Color = Color.red</span><br><span class="line"></span><br><span class="line">console.log(c) // 1</span><br><span class="line"></span><br><span class="line">// 若red = 3</span><br><span class="line">enum Color &#123;blue, red = 3, &apos;orange&apos;&#125;</span><br><span class="line"></span><br><span class="line">var o:Color = Color.orange</span><br><span class="line"></span><br><span class="line">console.log(o) // 4</span><br></pre></td></tr></table></figure><h4 id="any-任意类型"><a href="#any-任意类型" class="headerlink" title="any 任意类型"></a>any 任意类型</h4><ul><li>可以定义任意类型,number,string,boolean都行</li><li>任意类型的用处</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const oBox:any = document.getElementById(&apos;box&apos;)</span><br><span class="line"></span><br><span class="line">oBox.style.color = &apos;red&apos;</span><br></pre></td></tr></table></figure><h4 id="null和undefined-其他-never-类型的子类型"><a href="#null和undefined-其他-never-类型的子类型" class="headerlink" title="null和undefined 其他(never))类型的子类型"></a>null和undefined 其他(never))类型的子类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// var num:number // 输出会报错</span><br><span class="line"></span><br><span class="line">var num:undefined // 输出undefined 不会报错</span><br><span class="line"></span><br><span class="line">console.log(num) // undefined</span><br><span class="line"></span><br><span class="line">// 定义未赋值</span><br><span class="line">var num: number | undefined</span><br><span class="line"></span><br><span class="line">// 一个元素可能是number类型,可能是 null, undefined类型</span><br><span class="line">var num:number | null | undefined</span><br></pre></td></tr></table></figure><h4 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h4><ul><li>没有任何类型,一般用于定义方法的时候没有返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 正确写法</span><br><span class="line">// 没有返回值</span><br><span class="line">function run1():void &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run1()</span><br><span class="line"></span><br><span class="line">// 有返回值,返回值是什么类型的则定义什么类型</span><br><span class="line">function run2():number &#123;</span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 错误写法</span><br><span class="line">function run3():undefined &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line">run3()</span><br></pre></td></tr></table></figure><h4 id="never类型-其他类型"><a href="#never类型-其他类型" class="headerlink" title="never类型: 其他类型"></a>never类型: 其他类型</h4><ul><li>包括(null 和 undefined)的子类型,代表从不会出现的值</li><li>这意味着声明 <code>never的变量</code>只能被<code>never类型</code>赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a:never</span><br><span class="line"></span><br><span class="line">// a = 123 // 报错</span><br><span class="line"></span><br><span class="line">a(() =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;error&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="typescript-函数"><a href="#typescript-函数" class="headerlink" title="typescript 函数"></a>typescript 函数</h3><ul><li>函数的定义</li><li>可选参数</li><li>默认参数</li><li>剩余参数</li><li>函数重载</li><li>箭头函数 es6</li></ul><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>es5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function run() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var run2 = function() &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function run:string &#123;</span><br><span class="line">    </span><br><span class="line">    return &apos;run&apos;</span><br><span class="line">    // return 123 // 错误,定义未string类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var run = function():number &#123;</span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure></p><p>ts中定义方法传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function getInfo(name:string, age:number):string &#123;</span><br><span class="line">    return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;, 20))</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">var getInfo2 = function(name:string, age:number):string &#123;</span><br><span class="line">    return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo2(&apos;xiao2&apos;, 22))</span><br></pre></td></tr></table></figure><h4 id="方法可选参数"><a href="#方法可选参数" class="headerlink" title="方法可选参数"></a>方法可选参数</h4><ul><li>es5里面的方法的实参和形参可以不一样,但ts中必须一样,如果不一样就需要配置可选参数</li><li><code>?</code> 配置参数,<em>注意</em>可选参数必须配置到参数后面</li></ul><p>形参中有个<code>?</code>则是可传可不传,没有的,则一定传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getInfo(name:string, age?:number):string &#123;</span><br><span class="line">    if(age) &#123;</span><br><span class="line">        return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return `$&#123;name&#125; -- 年龄保密`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;)) // xiao -- 年龄保密</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;, 12)) // xiao -- 12</span><br><span class="line"></span><br><span class="line">// 错误写法 可选参数必须配置到参数后面</span><br><span class="line">// function getInfo(name?:string, age:number):string &#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul><li>es5 没法设置默认参数,但是es6和ts可以设置默认参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getInfo(name:string, age:number=20):string &#123;</span><br><span class="line">    if(age) &#123;</span><br><span class="line">        return `$&#123;name&#125; -- $&#123;age&#125;`</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return `$&#123;name&#125; -- 年龄保密`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;))</span><br></pre></td></tr></table></figure><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function sum(a:number, b:number, c:number):number &#123;</span><br><span class="line">    return a+b+c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3))</span><br><span class="line"></span><br><span class="line">// 三点运算符</span><br><span class="line"></span><br><span class="line">function sum(...result:number[]):number &#123;</span><br><span class="line">    var sum = 0</span><br><span class="line">    </span><br><span class="line">    for(var i =0; i &lt; result.length; i++) &#123;</span><br><span class="line">        sum += result[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3))</span><br></pre></td></tr></table></figure><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><ul><li>java中方法的重载,重载是指两个或者两个以上同名函数,但它们的参数不一样,这时会出现函数重载情况</li><li>typescript中的重载,通过为同一个函数提供多个函数类型定义来试下多种功能的目的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// es5中出现同名方法会替换上面的方法</span><br><span class="line">function css(config) &#123;&#125;</span><br><span class="line">function css(config, value) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ts中的重载</span><br><span class="line">function getInfo(name:string):string;</span><br><span class="line">function getInfo(age:number):number;</span><br><span class="line"></span><br><span class="line">function getInfo(str:any):any &#123;</span><br><span class="line">    if(str === &apos;string&apos;) &#123;</span><br><span class="line">        return &apos;我的名字叫&apos; + str</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &apos;我的年龄是&apos; + str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getInfo(&apos;xiao&apos;)) // 正确</span><br><span class="line">console.log(getInfo(20)) // 正确</span><br><span class="line">// console.log(getInfo(true)) // 错误,因为上面并没有找到参数和boolean类型匹配的</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><h3 id="typescript-类"><a href="#typescript-类" class="headerlink" title="typescript 类"></a>typescript 类</h3><ul><li>类的定义</li><li>继承</li><li>类的修饰符</li><li>静态属性 静态方法</li><li>抽象类 继承 多态</li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">function Person(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.run = function() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p  = new Person(&apos;xiao&apos;)</span><br><span class="line">p.run()</span><br><span class="line"></span><br><span class="line">// ts</span><br><span class="line">class Person &#123;</span><br><span class="line">    name: string // 属性 前面忽略public关键词</span><br><span class="line">    </span><br><span class="line">    constructor(n:string) &#123; // 构造函数 实例化类的时候触发方法</span><br><span class="line">        this.name = n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():void &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line"></span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><ul><li>get和set</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    name: string // 属性 前面忽略public关键词</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123; // 构造函数 实例化类的时候触发方法</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName(name:string):string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setNmae(name:string):void &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao1&apos;)</span><br><span class="line">console.log(p.getName()) // xiao1</span><br><span class="line">p.setName(&apos;xiao ming&apos;)</span><br><span class="line">console.log(p.getName()) // xiao ming</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line"></span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><h4 id="ts中实现继承-extends-super"><a href="#ts中实现继承-extends-super" class="headerlink" title="ts中实现继承 extends\ super"></a>ts中实现继承 extends\ super</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person(&apos;xiao&apos;)</span><br><span class="line">console.log(r.run())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class Web extends Person &#123;</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;super&apos;)</span><br><span class="line">console.log(w.run())</span><br></pre></td></tr></table></figure><h4 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td> public</td><td>公有</td><td>在当前类里面 子类 类外面都可以访问</td></tr><tr><td> protected</td><td>保护类型</td><td>在当前类里面 子类可以访问, 类外部无法访问</td></tr><tr><td> priviate</td><td>私有</td><td>在当前类里面可以访问, 子类,类外部无法访问</td></tr></tbody></table><p> <em>属性如果不写修饰符,则是公有</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> class Person &#123;</span><br><span class="line">    public name: string // 公有</span><br><span class="line">    // protected name: string // 保护</span><br><span class="line">    // priviate name: string // 私有</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run():string &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><ul><li>静态属性和静态方法在其定义前加 <code>static</code></li><li>静态方法 里面没法直接调用类里面的属性</li></ul><p>es5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 实例化方法</span><br><span class="line">function Person () &#123;</span><br><span class="line">    this.run1 = function() &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 静态方法</span><br><span class="line">Person.name = &apos;哈哈&apos;</span><br><span class="line">Person.run2 = function() &#123;&#125;</span><br><span class="line"></span><br><span class="line">var p = new Person() </span><br><span class="line">Person.run() // 静态方法的调用</span><br></pre></td></tr></table></figure><p>ts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    public name:string</span><br><span class="line">    static sex = &apos;man&apos; // 静态属性</span><br><span class="line">    </span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;在运动`)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    work() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;在工作`)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 静态方法 里面没法直接调用类里面的属性</span><br><span class="line">    static print() &#123;</span><br><span class="line">        console.log(&apos;static&apos; + Person.sex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.print()</span><br><span class="line"></span><br><span class="line">console.log(Person.sex)</span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>父类定义一个方法不去实现,让继承它的子类去实现, 每个子类有不同的表现 属于继承</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    name:string</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(&apos;eat ---- &apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        return this.name + &apos;吃东西&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        return this.name + &apos;吃猫粮&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li>它是提供其他继承的基类,不能直接被实例化</li><li>用<code>abstract</code>关键字定义抽象类和抽象方法,抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</li><li>abstract 抽象方法只能放在抽象类里面</li><li>抽象类和抽象方法用来定义标准</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 标准: Animal 这个类要求它的子类必须包含 eat 方法</span><br><span class="line">abstract class Animal &#123;</span><br><span class="line">    name:string</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 其他抽象类子类必须实现此方法</span><br><span class="line">    abstract eat():any &#123;</span><br><span class="line">        console.log(&apos;eat ---- &apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 其他方法可以不用实现</span><br><span class="line">    run() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// var a = new Animal() // 错误写法</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    constructor (name: any) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;吃狗粮`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dog = new Animal(&apos;dog&apos;)</span><br><span class="line">d.eat()</span><br></pre></td></tr></table></figure><h3 id="typescript-接口"><a href="#typescript-接口" class="headerlink" title="typescript 接口"></a>typescript 接口</h3><ul><li>属性类接口</li><li>函数类型接口</li><li>可索引接口</li><li>类类型接口</li><li>接口扩展</li></ul><h4 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h4><ul><li>自定义方法传入参数,对json的约束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function printLabel(&#123;labelInfo: &#123;label:string&#125;&#125;):void &#123;</span><br><span class="line">    console.log(&apos;printLabel&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// printLabel(&apos;hhh&apos;) // 错误写法</span><br><span class="line">// printLabel(&#123;name: &apos;xiao&apos;&#125;) // 错误写法</span><br><span class="line">printLabel(&#123;label: &apos;xiao ming&apos;&#125;) // 正确</span><br></pre></td></tr></table></figure><ul><li>对批量方法传入参数进行约束, 必须有关键字<code>interface</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">interface FullName &#123; </span><br><span class="line">    firstName: string; // 注意: 一定是 `;`结束</span><br><span class="line">    secondName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function printName(name: FullName) &#123;</span><br><span class="line">    console.log(`$&#123;name.firstName&#125;----$&#123;name.secondName&#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printInfo(info: FullName) &#123;</span><br><span class="line">    console.log(`$&#123;info.firstName&#125;----$&#123;info.secondName&#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    age: 20, </span><br><span class="line">    firstName : &apos;xiao&apos;,</span><br><span class="line">    secondName: &apos;ming&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var info = &#123;</span><br><span class="line">    firstName : &apos;xiao&apos;,</span><br><span class="line">    secondName: &apos;ming&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printName(obj)</span><br><span class="line"></span><br><span class="line">printInfo(info)</span><br></pre></td></tr></table></figure><h4 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h4><ul><li>对方法传入的参数以及返回值进行约束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface encrypt &#123;</span><br><span class="line">    (key:string, value:string):string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var md5:encrypt = function(key:string, value:string):string &#123;</span><br><span class="line">    return key+value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(md5(&apos;name&apos;, &apos;xiao&apos;))</span><br></pre></td></tr></table></figure><h4 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h4><ul><li>对数组对象约束,不常用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// ts 定义数组方式</span><br><span class="line">var arr:number[] = [12, 23]</span><br><span class="line"></span><br><span class="line">var arr1:Array&lt;string&gt;=[&apos;12&apos;, &apos;23&apos;]</span><br><span class="line"></span><br><span class="line">// 对数组约束</span><br><span class="line">interface UserArr &#123;</span><br><span class="line">    [index: number]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr2:UserArr = [&apos;aaa&apos;, &apos;bbb&apos;]</span><br><span class="line"></span><br><span class="line">console.log(arr2[0])</span><br><span class="line"></span><br><span class="line">// 对对象约束</span><br><span class="line">interface UserObj &#123;</span><br><span class="line">    [index:string]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr3:UserObj = [name: &apos;xiao ming&apos;]</span><br><span class="line"></span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure><h4 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h4><ul><li>对类的约束和抽象类有点相似</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  name: string</span><br><span class="line"></span><br><span class="line">  eat(str: string): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog implements Animal &#123;</span><br><span class="line">  name: string</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;吃狗粮&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var d = new Dog(&apos;dog&apos;)</span><br><span class="line"></span><br><span class="line">d.eat()</span><br></pre></td></tr></table></figure><h4 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h4><ul><li>接口可以继承接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  word(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Web implements Person &#123;</span><br><span class="line">  public name:string</span><br><span class="line">  constructor(name:string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;吃中餐&apos;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  work() &#123;</span><br><span class="line">      console.log(this.name + &apos;工作&apos;)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;xiao ku&apos;)</span><br><span class="line"></span><br><span class="line">w.eat()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  work(): void</span><br><span class="line">&#125;</span><br><span class="line">class Programmer &#123;</span><br><span class="line">  public name: string</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  coding(code: string) &#123;</span><br><span class="line">    console.log(this.name + code)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Web extends Programmer implements Person &#123;</span><br><span class="line">  constructor(name: string) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    console.log(this.name + &apos;喜欢吃馒头&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    console.log(this.name + &apos;写代码&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w = new Web(&apos;小李&apos;)</span><br><span class="line"></span><br><span class="line">// w.eat()</span><br><span class="line">w.coding(&apos;敲代码&apos;)</span><br></pre></td></tr></table></figure><h3 id="typescript-泛型"><a href="#typescript-泛型" class="headerlink" title="typescript 泛型"></a>typescript 泛型</h3><ul><li>泛型的定义</li><li>泛型函数</li><li>泛型类</li><li>泛型接口</li></ul><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4><ul><li>泛型:软件工程中,不仅要创建一致定义良好的API, 组件不仅能够支持当前的数据类型,同事也能支持未来的数据类型,这在创建大型系统时为你提供十分灵活的功能</li><li>就是解决类接口,方法的复用性,以及对不特定数据类型的支持(类型校验)</li><li>可以支持不特定的数据类型, 但传入的参数和返回的参数一致</li></ul><p><strong>T表示泛型,具体什么类型是调用这个方法的时候决定的</strong></p><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(value:T):T &#123;</span><br><span class="line">    return value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDate&lt;number&gt;(123) // 正确</span><br><span class="line">getDate&lt;number&gt;(&apos;123&apos;) // 错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// any 返回指定值不报错,通常推荐以上写法</span><br><span class="line">function getData&lt;T&gt;(value:T):any &#123;</span><br><span class="line">    return value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDate&lt;number&gt;(123)</span><br><span class="line">getDate&lt;string&gt;(&apos;123&apos;)</span><br></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ul><li>比如有个最小堆算法,需要同时支持返回数字和字符串两种类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class MinClass &#123;</span><br><span class="line">  public list: number[] = []</span><br><span class="line"></span><br><span class="line">  add(num: number) &#123;</span><br><span class="line">    this.list.push(num)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min() &#123;</span><br><span class="line">    var minNum = this.list[0]</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class="line">      if (minNum &gt; this.list[i]) &#123;</span><br><span class="line">        minNum = this.list[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var m = new MinClass()</span><br><span class="line"></span><br><span class="line">m.add(289)</span><br><span class="line">m.add(22)</span><br><span class="line">m.add(23)</span><br><span class="line">m.add(28)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(m.min())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ts写法</span><br><span class="line"></span><br><span class="line">class MinClass&lt;T&gt; &#123;</span><br><span class="line">  public list: T[] = []</span><br><span class="line"></span><br><span class="line">  add(value:T):void &#123;</span><br><span class="line">    this.list.push(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min():T &#123;</span><br><span class="line">    var minNum = this.list[0]</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class="line">      if (minNum &gt; this.list[i]) &#123;</span><br><span class="line">        minNum = this.list[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var m1 = new MinClass&lt;number&gt;() // 实例化类, 并且指定了类的T代表类型是number</span><br><span class="line"></span><br><span class="line">m1.add(29)</span><br><span class="line">m1.add(22)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(m1.min())</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### 泛型接口</span><br><span class="line"></span><br><span class="line">函数类型接口写法</span><br></pre></td></tr></table></figure><p>interface ConfigFn {<br>    (value1:string, value2 :string):string<br>}</p><p>var setData:configFn = function(value1:string,value2:string) {<br>    return value1+value2<br>}</p><p>setData(‘name’, ‘xiao ming’)</p><p>1.泛型接口写法<br>interface ConfigFn {<br>    <t>(value:T):T<br>}</t></p><p>var getData1:ConfigFn = function<t>(value:T):T {<br>    return value<br>}</t></p><p>getData1<string>(‘xiao xiao’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.泛型接口写法</span><br></pre></td></tr></table></figure></string></p><p>interface ConfigFn<t> {<br>    (value:T):T<br>}</t></p><p>function getData3<t>(value:T):T {<br>    return value<br>}</t></p><p>var myGetData:ConfigFn<string> = getData3<br>myGetData(‘xiao hong’)<br><code>`</code></string></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;学习typescript 数据类型 | 相关函数 | 类 | 接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/
      
    
    </summary>
    
      <category term="study" scheme="https://ai-ruby.github.io/categories/study/"/>
    
    
      <category term="typescript" scheme="https://ai-ruby.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用Hexo + github 搭建个人博客详解</title>
    <link href="https://ai-ruby.github.io//posts/Hexo%20+%20github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://ai-ruby.github.io//posts/Hexo + github 搭建个人博客/</id>
    <published>2018-04-03T03:32:40.613Z</published>
    <updated>2018-07-27T04:03:47.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Mac平台通过Hexo + github 搭建个人博客</p></blockquote><h2 id="Hexo-安装流程"><a href="#Hexo-安装流程" class="headerlink" title="Hexo 安装流程"></a>Hexo 安装流程</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 官网</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> 官网</li></ul><p>具体怎么安装就不细说了,在准备环境搭建好之后,就可以开始使用<code>Hexo</code>搭建博客了</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><blockquote><p>当Node.js和git都安装好了,就可以安装 Hexo, 在终端执行以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli/Users/ruai/projects/blogs/hexo-blogs/source/_posts/Typescript.md</span><br></pre></td></tr></table></figure><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><blockquote><p>在自己项目目录下新建一个文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install ==&gt; 简写  npm i</span><br><span class="line">hexo server ==&gt; 简写 hexo s</span><br></pre></td></tr></table></figure><p>此时在浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到一个静态网页</p><h3 id="Hexo文件夹目录结构"><a href="#Hexo文件夹目录结构" class="headerlink" title="Hexo文件夹目录结构"></a>Hexo文件夹目录结构</h3><blockquote><ul><li>source：博客资源文件夹</li><li>source/_drafts：草稿文件夹</li><li>source/_posts：文章文件夹</li><li>themes：存放主题的文件夹</li><li>themes/landscape：默认的主题</li><li>_config.yml：全局配置文件</li></ul></blockquote><h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><ul><li>创建github账号并创建repository</li></ul><blockquote><p>博客发布到Github Pages上，供外网访问，当然你也可以部署到其他服务器上，Github Pages服务的使用步骤：</p><ul><li>开通Github账号，例如我的账号名CSDNHensen，这个后面会用到</li><li>创建一个repository，名称开头必须和账号名一样，然后以.github.io结尾</li></ul></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/github-repository.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>修改hexo的配置文件</li></ul><blockquote><ul><li>修改配置文件：_config.yml，整个站点的配置都在这里，打开_config.yml文件</li><li>找到下面的语句，然后修改你的信息，repository在github仓库中可以复制</li><li>github或者是coding 也行, 我是使用github的</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">            github: https://github.com/github名/github名.github.io</span><br><span class="line">            coding: https://git.coding.net/coding/coding.coding.me.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>注意项:<blockquote><ul><li>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错.*</li></ul></blockquote></li></ul><h3 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h3><ul><li>下载喜欢的主题<blockquote><ul><li>可到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网themes</a> 选择喜欢的主题</li></ul></blockquote></li></ul><blockquote><p>本主题是 <code>tomotoes</code></p></blockquote><p>在项目执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Tomotoes/hexo-theme-tomotoes themes/tomotoes</span><br></pre></td></tr></table></figure></p><ul><li>在配置文件下修改themes<blockquote><p>在项目_config.yml 找到 themes修改为tomotoes</p></blockquote></li></ul><p>可查看主题文档安装,以下不细说</p><hr><h2 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><blockquote><p>发布博客有两种方式: 一:通过命令行生成博客样板; 二:直接用markdown文档写完后放置/source/_posts目录下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new HelloWord</span><br></pre></td></tr></table></figure><blockquote><p>新生成的文章都会保存在/source/_posts目录下，打开生成的模板，内容如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Mac 使用Hexo + github 搭建个人博客详解</span><br><span class="line">abbrlink: 16107</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h3><blockquote><p>新增了博客文章后，需要提交到服务器上，输入以下指令完成将博客生成静态Html文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>hexo generate 简写  hexo g</p><h3 id="发布博客到服务器"><a href="#发布博客到服务器" class="headerlink" title="发布博客到服务器"></a>发布博客到服务器</h3><blockquote><p>安装hexo-deployer-git工具，输入指令<br><em>如果是第一次发布的需要安装<code>hexo-deployer-git</code>工具</em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>提交到服务器上，提交过程中还需要输入github账号和密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>hexo deploy 简写 hexo d</p><blockquote><p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  // 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g      // 生成缓存和静态文件</span><br><span class="line">hexo d      // 重新部署到服务器</span><br></pre></td></tr></table></figure><hr><h2 id="Hexo快捷命令"><a href="#Hexo快捷命令" class="headerlink" title="Hexo快捷命令"></a>Hexo快捷命令</h2><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; //新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; //新建页面</span><br><span class="line">hexo generate //生成静态页面至public目录</span><br><span class="line">hexo server //开启预览访问端口（默认端口4000，ctrl+c关闭server）</span><br><span class="line">hexo deploy //将.deploy目录部署到服务器</span><br></pre></td></tr></table></figure><blockquote><p>简写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>快捷简写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g == hexo deploy -generate</span><br><span class="line">hexo g -d == hexo -deploy -deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在Mac平台通过Hexo + github 搭建个人博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hexo-安装流程&quot;&gt;&lt;a href=&quot;#Hexo-安装流程&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装流程&quot;&gt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://ai-ruby.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
